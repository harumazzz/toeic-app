// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/sqlc-dev/pqtype"
)

// Status of an exam attempt
type ExamStatusEnum string

const (
	ExamStatusEnumInProgress ExamStatusEnum = "in_progress"
	ExamStatusEnumCompleted  ExamStatusEnum = "completed"
	ExamStatusEnumAbandoned  ExamStatusEnum = "abandoned"
)

func (e *ExamStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExamStatusEnum(s)
	case string:
		*e = ExamStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ExamStatusEnum: %T", src)
	}
	return nil
}

type NullExamStatusEnum struct {
	ExamStatusEnum ExamStatusEnum `json:"exam_status_enum"`
	Valid          bool           `json:"valid"` // Valid is true if ExamStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExamStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ExamStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExamStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExamStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExamStatusEnum), nil
}

type Content struct {
	ContentID   int32  `json:"content_id"`
	PartID      int32  `json:"part_id"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

type Exam struct {
	ExamID           int32  `json:"exam_id"`
	Title            string `json:"title"`
	TimeLimitMinutes int32  `json:"time_limit_minutes"`
	IsUnlocked       bool   `json:"is_unlocked"`
}

// Track user exam attempts with timing and scoring
type ExamAttempt struct {
	AttemptID int32        `json:"attempt_id"`
	UserID    int32        `json:"user_id"`
	ExamID    int32        `json:"exam_id"`
	StartTime time.Time    `json:"start_time"`
	EndTime   sql.NullTime `json:"end_time"`
	// TOEIC score (0-990), NULL if not completed
	Score     sql.NullString `json:"score"`
	Status    ExamStatusEnum `json:"status"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

type Example struct {
	ID      int32  `json:"id"`
	Title   string `json:"title"`
	Meaning string `json:"meaning"`
}

type Grammar struct {
	ID         int32           `json:"id"`
	Level      int32           `json:"level"`
	Title      string          `json:"title"`
	Tag        []string        `json:"tag"`
	GrammarKey string          `json:"grammar_key"`
	Related    []int32         `json:"related"`
	Contents   json.RawMessage `json:"contents"`
}

type LearningAttempt struct {
	ID               int32          `json:"id"`
	SessionID        int32          `json:"session_id"`
	WordID           int32          `json:"word_id"`
	AttemptType      string         `json:"attempt_type"`
	UserAnswer       sql.NullString `json:"user_answer"`
	CorrectAnswer    string         `json:"correct_answer"`
	IsCorrect        bool           `json:"is_correct"`
	ResponseTimeMs   sql.NullInt32  `json:"response_time_ms"`
	DifficultyRating sql.NullInt32  `json:"difficulty_rating"`
	CreatedAt        time.Time      `json:"created_at"`
}

type LearningSession struct {
	ID             int32                 `json:"id"`
	UserID         int32                 `json:"user_id"`
	StudySetID     sql.NullInt32         `json:"study_set_id"`
	SessionType    string                `json:"session_type"`
	StartedAt      time.Time             `json:"started_at"`
	CompletedAt    sql.NullTime          `json:"completed_at"`
	TotalQuestions sql.NullInt32         `json:"total_questions"`
	CorrectAnswers sql.NullInt32         `json:"correct_answers"`
	SessionData    pqtype.NullRawMessage `json:"session_data"`
}

type Part struct {
	PartID int32  `json:"part_id"`
	ExamID int32  `json:"exam_id"`
	Title  string `json:"title"`
}

type Permission struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Resource    string         `json:"resource"`
	Action      string         `json:"action"`
	Description sql.NullString `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
}

type Question struct {
	QuestionID      int32          `json:"question_id"`
	ContentID       int32          `json:"content_id"`
	Title           string         `json:"title"`
	MediaUrl        sql.NullString `json:"media_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PossibleAnswers []string       `json:"possible_answers"`
	TrueAnswer      string         `json:"true_answer"`
	Explanation     string         `json:"explanation"`
	Keywords        sql.NullString `json:"keywords"`
}

type Role struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type RolePermission struct {
	RoleID       int32     `json:"role_id"`
	PermissionID int32     `json:"permission_id"`
	CreatedAt    time.Time `json:"created_at"`
}

type SpeakingSession struct {
	ID           int32          `json:"id"`
	UserID       int32          `json:"user_id"`
	SessionTopic sql.NullString `json:"session_topic"`
	StartTime    time.Time      `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
	UpdatedAt    time.Time      `json:"updated_at"`
}

type SpeakingTurn struct {
	ID                 int32                 `json:"id"`
	SessionID          int32                 `json:"session_id"`
	SpeakerType        string                `json:"speaker_type"`
	TextSpoken         sql.NullString        `json:"text_spoken"`
	AudioRecordingPath sql.NullString        `json:"audio_recording_path"`
	Timestamp          time.Time             `json:"timestamp"`
	AiEvaluation       pqtype.NullRawMessage `json:"ai_evaluation"`
	AiScore            sql.NullString        `json:"ai_score"`
}

type StudySet struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsPublic    sql.NullBool   `json:"is_public"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type StudySetWord struct {
	StudySetID int32     `json:"study_set_id"`
	WordID     int32     `json:"word_id"`
	CreatedAt  time.Time `json:"created_at"`
}

type User struct {
	ID           int32     `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

// Store user answers for each question in an exam attempt
type UserAnswer struct {
	UserAnswerID int32 `json:"user_answer_id"`
	AttemptID    int32 `json:"attempt_id"`
	QuestionID   int32 `json:"question_id"`
	// User selected answer text
	SelectedAnswer string `json:"selected_answer"`
	// Whether the answer is correct
	IsCorrect  bool         `json:"is_correct"`
	AnswerTime sql.NullTime `json:"answer_time"`
	CreatedAt  time.Time    `json:"created_at"`
}

type UserProfile struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	FullName  sql.NullString `json:"full_name"`
	Bio       sql.NullString `json:"bio"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

type UserRole struct {
	UserID     int32         `json:"user_id"`
	RoleID     int32         `json:"role_id"`
	AssignedAt time.Time     `json:"assigned_at"`
	AssignedBy sql.NullInt32 `json:"assigned_by"`
	ExpiresAt  sql.NullTime  `json:"expires_at"`
}

type UserWordProgress struct {
	UserID         int32        `json:"user_id"`
	WordID         int32        `json:"word_id"`
	LastReviewedAt sql.NullTime `json:"last_reviewed_at"`
	NextReviewAt   sql.NullTime `json:"next_review_at"`
	IntervalDays   int32        `json:"interval_days"`
	EaseFactor     float32      `json:"ease_factor"`
	Repetitions    int32        `json:"repetitions"`
	CreatedAt      time.Time    `json:"created_at"`
	UpdatedAt      time.Time    `json:"updated_at"`
}

type UserWriting struct {
	ID             int32                 `json:"id"`
	UserID         int32                 `json:"user_id"`
	PromptID       sql.NullInt32         `json:"prompt_id"`
	SubmissionText string                `json:"submission_text"`
	AiFeedback     pqtype.NullRawMessage `json:"ai_feedback"`
	AiScore        sql.NullString        `json:"ai_score"`
	SubmittedAt    time.Time             `json:"submitted_at"`
	EvaluatedAt    sql.NullTime          `json:"evaluated_at"`
	UpdatedAt      time.Time             `json:"updated_at"`
}

type VocabularyStat struct {
	ID                  int32         `json:"id"`
	UserID              int32         `json:"user_id"`
	WordID              int32         `json:"word_id"`
	TotalAttempts       sql.NullInt32 `json:"total_attempts"`
	CorrectAttempts     sql.NullInt32 `json:"correct_attempts"`
	TotalResponseTimeMs sql.NullInt64 `json:"total_response_time_ms"`
	MasteryLevel        sql.NullInt32 `json:"mastery_level"`
	LastAttemptAt       sql.NullTime  `json:"last_attempt_at"`
	CreatedAt           time.Time     `json:"created_at"`
	UpdatedAt           time.Time     `json:"updated_at"`
}

type Word struct {
	ID            int32                 `json:"id"`
	Word          string                `json:"word"`
	Pronounce     string                `json:"pronounce"`
	Level         int32                 `json:"level"`
	DescriptLevel string                `json:"descript_level"`
	ShortMean     string                `json:"short_mean"`
	Means         pqtype.NullRawMessage `json:"means"`
	Snym          pqtype.NullRawMessage `json:"snym"`
	Freq          float32               `json:"freq"`
	Conjugation   pqtype.NullRawMessage `json:"conjugation"`
}

type WritingPrompt struct {
	ID              int32          `json:"id"`
	UserID          sql.NullInt32  `json:"user_id"`
	PromptText      string         `json:"prompt_text"`
	Topic           sql.NullString `json:"topic"`
	DifficultyLevel sql.NullString `json:"difficulty_level"`
	CreatedAt       time.Time      `json:"created_at"`
}
