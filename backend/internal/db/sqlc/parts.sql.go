// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: parts.sql

package db

import (
	"context"
)

const createPart = `-- name: CreatePart :one
INSERT INTO parts (
    exam_id,
    title
) VALUES (
    $1, $2
) RETURNING part_id, exam_id, title
`

type CreatePartParams struct {
	ExamID int32  `json:"exam_id"`
	Title  string `json:"title"`
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) (Part, error) {
	row := q.db.QueryRowContext(ctx, createPart, arg.ExamID, arg.Title)
	var i Part
	err := row.Scan(&i.PartID, &i.ExamID, &i.Title)
	return i, err
}

const deletePart = `-- name: DeletePart :exec
DELETE FROM parts
WHERE part_id = $1
`

func (q *Queries) DeletePart(ctx context.Context, partID int32) error {
	_, err := q.db.ExecContext(ctx, deletePart, partID)
	return err
}

const getPart = `-- name: GetPart :one
SELECT part_id, exam_id, title FROM parts
WHERE part_id = $1 LIMIT 1
`

func (q *Queries) GetPart(ctx context.Context, partID int32) (Part, error) {
	row := q.db.QueryRowContext(ctx, getPart, partID)
	var i Part
	err := row.Scan(&i.PartID, &i.ExamID, &i.Title)
	return i, err
}

const listPartsByExam = `-- name: ListPartsByExam :many
SELECT part_id, exam_id, title FROM parts
WHERE exam_id = $1
ORDER BY part_id
`

func (q *Queries) ListPartsByExam(ctx context.Context, examID int32) ([]Part, error) {
	rows, err := q.db.QueryContext(ctx, listPartsByExam, examID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Part
	for rows.Next() {
		var i Part
		if err := rows.Scan(&i.PartID, &i.ExamID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePart = `-- name: UpdatePart :one
UPDATE parts
SET
    exam_id = $2,
    title = $3
WHERE part_id = $1
RETURNING part_id, exam_id, title
`

type UpdatePartParams struct {
	PartID int32  `json:"part_id"`
	ExamID int32  `json:"exam_id"`
	Title  string `json:"title"`
}

func (q *Queries) UpdatePart(ctx context.Context, arg UpdatePartParams) (Part, error) {
	row := q.db.QueryRowContext(ctx, updatePart, arg.PartID, arg.ExamID, arg.Title)
	var i Part
	err := row.Scan(&i.PartID, &i.ExamID, &i.Title)
	return i, err
}
