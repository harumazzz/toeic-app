// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writings.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createUserWriting = `-- name: CreateUserWriting :one
INSERT INTO user_writings (
    user_id,
    prompt_id,
    submission_text,
    ai_feedback,
    ai_score
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, prompt_id, submission_text, ai_feedback, ai_score, submitted_at, evaluated_at, updated_at
`

type CreateUserWritingParams struct {
	UserID         int32                 `json:"user_id"`
	PromptID       sql.NullInt32         `json:"prompt_id"`
	SubmissionText string                `json:"submission_text"`
	AiFeedback     pqtype.NullRawMessage `json:"ai_feedback"`
	AiScore        sql.NullString        `json:"ai_score"`
}

func (q *Queries) CreateUserWriting(ctx context.Context, arg CreateUserWritingParams) (UserWriting, error) {
	row := q.db.QueryRowContext(ctx, createUserWriting,
		arg.UserID,
		arg.PromptID,
		arg.SubmissionText,
		arg.AiFeedback,
		arg.AiScore,
	)
	var i UserWriting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptID,
		&i.SubmissionText,
		&i.AiFeedback,
		&i.AiScore,
		&i.SubmittedAt,
		&i.EvaluatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWritingPrompt = `-- name: CreateWritingPrompt :one
INSERT INTO writing_prompts (
    user_id,
    prompt_text,
    topic,
    difficulty_level
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, prompt_text, topic, difficulty_level, created_at
`

type CreateWritingPromptParams struct {
	UserID          sql.NullInt32  `json:"user_id"`
	PromptText      string         `json:"prompt_text"`
	Topic           sql.NullString `json:"topic"`
	DifficultyLevel sql.NullString `json:"difficulty_level"`
}

func (q *Queries) CreateWritingPrompt(ctx context.Context, arg CreateWritingPromptParams) (WritingPrompt, error) {
	row := q.db.QueryRowContext(ctx, createWritingPrompt,
		arg.UserID,
		arg.PromptText,
		arg.Topic,
		arg.DifficultyLevel,
	)
	var i WritingPrompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.Topic,
		&i.DifficultyLevel,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserWriting = `-- name: DeleteUserWriting :exec
DELETE FROM user_writings
WHERE id = $1
`

func (q *Queries) DeleteUserWriting(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserWriting, id)
	return err
}

const deleteWritingPrompt = `-- name: DeleteWritingPrompt :exec
DELETE FROM writing_prompts
WHERE id = $1
`

func (q *Queries) DeleteWritingPrompt(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWritingPrompt, id)
	return err
}

const getUserWriting = `-- name: GetUserWriting :one
SELECT id, user_id, prompt_id, submission_text, ai_feedback, ai_score, submitted_at, evaluated_at, updated_at FROM user_writings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserWriting(ctx context.Context, id int32) (UserWriting, error) {
	row := q.db.QueryRowContext(ctx, getUserWriting, id)
	var i UserWriting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptID,
		&i.SubmissionText,
		&i.AiFeedback,
		&i.AiScore,
		&i.SubmittedAt,
		&i.EvaluatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWritingPrompt = `-- name: GetWritingPrompt :one
SELECT id, user_id, prompt_text, topic, difficulty_level, created_at FROM writing_prompts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWritingPrompt(ctx context.Context, id int32) (WritingPrompt, error) {
	row := q.db.QueryRowContext(ctx, getWritingPrompt, id)
	var i WritingPrompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.Topic,
		&i.DifficultyLevel,
		&i.CreatedAt,
	)
	return i, err
}

const listUserWritingsByPromptID = `-- name: ListUserWritingsByPromptID :many
SELECT id, user_id, prompt_id, submission_text, ai_feedback, ai_score, submitted_at, evaluated_at, updated_at FROM user_writings
WHERE prompt_id = $1
ORDER BY submitted_at DESC
`

func (q *Queries) ListUserWritingsByPromptID(ctx context.Context, promptID sql.NullInt32) ([]UserWriting, error) {
	rows, err := q.db.QueryContext(ctx, listUserWritingsByPromptID, promptID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserWriting
	for rows.Next() {
		var i UserWriting
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PromptID,
			&i.SubmissionText,
			&i.AiFeedback,
			&i.AiScore,
			&i.SubmittedAt,
			&i.EvaluatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserWritingsByUserID = `-- name: ListUserWritingsByUserID :many
SELECT id, user_id, prompt_id, submission_text, ai_feedback, ai_score, submitted_at, evaluated_at, updated_at FROM user_writings
WHERE user_id = $1
ORDER BY submitted_at DESC
`

func (q *Queries) ListUserWritingsByUserID(ctx context.Context, userID int32) ([]UserWriting, error) {
	rows, err := q.db.QueryContext(ctx, listUserWritingsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserWriting
	for rows.Next() {
		var i UserWriting
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PromptID,
			&i.SubmissionText,
			&i.AiFeedback,
			&i.AiScore,
			&i.SubmittedAt,
			&i.EvaluatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWritingPrompts = `-- name: ListWritingPrompts :many
SELECT id, user_id, prompt_text, topic, difficulty_level, created_at FROM writing_prompts
ORDER BY created_at DESC
`

func (q *Queries) ListWritingPrompts(ctx context.Context) ([]WritingPrompt, error) {
	rows, err := q.db.QueryContext(ctx, listWritingPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WritingPrompt
	for rows.Next() {
		var i WritingPrompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PromptText,
			&i.Topic,
			&i.DifficultyLevel,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWriting = `-- name: UpdateUserWriting :one
UPDATE user_writings
SET
    submission_text = $2,
    ai_feedback = $3,
    ai_score = $4,
    evaluated_at = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, prompt_id, submission_text, ai_feedback, ai_score, submitted_at, evaluated_at, updated_at
`

type UpdateUserWritingParams struct {
	ID             int32                 `json:"id"`
	SubmissionText string                `json:"submission_text"`
	AiFeedback     pqtype.NullRawMessage `json:"ai_feedback"`
	AiScore        sql.NullString        `json:"ai_score"`
	EvaluatedAt    sql.NullTime          `json:"evaluated_at"`
}

func (q *Queries) UpdateUserWriting(ctx context.Context, arg UpdateUserWritingParams) (UserWriting, error) {
	row := q.db.QueryRowContext(ctx, updateUserWriting,
		arg.ID,
		arg.SubmissionText,
		arg.AiFeedback,
		arg.AiScore,
		arg.EvaluatedAt,
	)
	var i UserWriting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptID,
		&i.SubmissionText,
		&i.AiFeedback,
		&i.AiScore,
		&i.SubmittedAt,
		&i.EvaluatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWritingPrompt = `-- name: UpdateWritingPrompt :one
UPDATE writing_prompts
SET
    prompt_text = $2,
    topic = $3,
    difficulty_level = $4
WHERE id = $1
RETURNING id, user_id, prompt_text, topic, difficulty_level, created_at
`

type UpdateWritingPromptParams struct {
	ID              int32          `json:"id"`
	PromptText      string         `json:"prompt_text"`
	Topic           sql.NullString `json:"topic"`
	DifficultyLevel sql.NullString `json:"difficulty_level"`
}

func (q *Queries) UpdateWritingPrompt(ctx context.Context, arg UpdateWritingPromptParams) (WritingPrompt, error) {
	row := q.db.QueryRowContext(ctx, updateWritingPrompt,
		arg.ID,
		arg.PromptText,
		arg.Topic,
		arg.DifficultyLevel,
	)
	var i WritingPrompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.Topic,
		&i.DifficultyLevel,
		&i.CreatedAt,
	)
	return i, err
}
