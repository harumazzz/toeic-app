// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exams.sql

package db

import (
	"context"
)

const createExam = `-- name: CreateExam :one
INSERT INTO exams (
    title,
    time_limit_minutes,
    is_unlocked
) VALUES (
    $1, $2, $3
) RETURNING exam_id, title, time_limit_minutes, is_unlocked
`

type CreateExamParams struct {
	Title            string `json:"title"`
	TimeLimitMinutes int32  `json:"time_limit_minutes"`
	IsUnlocked       bool   `json:"is_unlocked"`
}

func (q *Queries) CreateExam(ctx context.Context, arg CreateExamParams) (Exam, error) {
	row := q.db.QueryRowContext(ctx, createExam, arg.Title, arg.TimeLimitMinutes, arg.IsUnlocked)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.Title,
		&i.TimeLimitMinutes,
		&i.IsUnlocked,
	)
	return i, err
}

const deleteExam = `-- name: DeleteExam :exec
DELETE FROM exams
WHERE exam_id = $1
`

func (q *Queries) DeleteExam(ctx context.Context, examID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExam, examID)
	return err
}

const getExam = `-- name: GetExam :one
SELECT exam_id, title, time_limit_minutes, is_unlocked FROM exams
WHERE exam_id = $1 LIMIT 1
`

func (q *Queries) GetExam(ctx context.Context, examID int32) (Exam, error) {
	row := q.db.QueryRowContext(ctx, getExam, examID)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.Title,
		&i.TimeLimitMinutes,
		&i.IsUnlocked,
	)
	return i, err
}

const listExams = `-- name: ListExams :many
SELECT exam_id, title, time_limit_minutes, is_unlocked FROM exams
ORDER BY exam_id
`

func (q *Queries) ListExams(ctx context.Context) ([]Exam, error) {
	rows, err := q.db.QueryContext(ctx, listExams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exam
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ExamID,
			&i.Title,
			&i.TimeLimitMinutes,
			&i.IsUnlocked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExam = `-- name: UpdateExam :one
UPDATE exams
SET
    title = $2,
    time_limit_minutes = $3,
    is_unlocked = $4
WHERE exam_id = $1
RETURNING exam_id, title, time_limit_minutes, is_unlocked
`

type UpdateExamParams struct {
	ExamID           int32  `json:"exam_id"`
	Title            string `json:"title"`
	TimeLimitMinutes int32  `json:"time_limit_minutes"`
	IsUnlocked       bool   `json:"is_unlocked"`
}

func (q *Queries) UpdateExam(ctx context.Context, arg UpdateExamParams) (Exam, error) {
	row := q.db.QueryRowContext(ctx, updateExam,
		arg.ExamID,
		arg.Title,
		arg.TimeLimitMinutes,
		arg.IsUnlocked,
	)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.Title,
		&i.TimeLimitMinutes,
		&i.IsUnlocked,
	)
	return i, err
}
