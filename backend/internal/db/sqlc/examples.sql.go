// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: examples.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const batchGetExamples = `-- name: BatchGetExamples :many
SELECT id, title, meaning FROM examples
WHERE id = ANY($1::int[])
ORDER BY id
`

func (q *Queries) BatchGetExamples(ctx context.Context, dollar_1 []int32) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, batchGetExamples, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.Title, &i.Meaning); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createExample = `-- name: CreateExample :one
INSERT INTO examples (
    title,
    meaning
) VALUES (
    $1, $2
) RETURNING id, title, meaning
`

type CreateExampleParams struct {
	Title   string `json:"title"`
	Meaning string `json:"meaning"`
}

func (q *Queries) CreateExample(ctx context.Context, arg CreateExampleParams) (Example, error) {
	row := q.db.QueryRowContext(ctx, createExample, arg.Title, arg.Meaning)
	var i Example
	err := row.Scan(&i.ID, &i.Title, &i.Meaning)
	return i, err
}

const deleteExample = `-- name: DeleteExample :exec
DELETE FROM examples
WHERE id = $1
`

func (q *Queries) DeleteExample(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExample, id)
	return err
}

const getExample = `-- name: GetExample :one
SELECT id, title, meaning FROM examples
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExample(ctx context.Context, id int32) (Example, error) {
	row := q.db.QueryRowContext(ctx, getExample, id)
	var i Example
	err := row.Scan(&i.ID, &i.Title, &i.Meaning)
	return i, err
}

const listExamples = `-- name: ListExamples :many
SELECT id, title, meaning FROM examples
ORDER BY id
`

func (q *Queries) ListExamples(ctx context.Context) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, listExamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.Title, &i.Meaning); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExample = `-- name: UpdateExample :one
UPDATE examples
SET title = $2,
    meaning = $3
WHERE id = $1
RETURNING id, title, meaning
`

type UpdateExampleParams struct {
	ID      int32  `json:"id"`
	Title   string `json:"title"`
	Meaning string `json:"meaning"`
}

func (q *Queries) UpdateExample(ctx context.Context, arg UpdateExampleParams) (Example, error) {
	row := q.db.QueryRowContext(ctx, updateExample, arg.ID, arg.Title, arg.Meaning)
	var i Example
	err := row.Scan(&i.ID, &i.Title, &i.Meaning)
	return i, err
}
