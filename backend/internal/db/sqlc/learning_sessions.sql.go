// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: learning_sessions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createLearningAttempt = `-- name: CreateLearningAttempt :one
INSERT INTO learning_attempts (
  session_id,
  word_id,
  attempt_type,
  user_answer,
  correct_answer,
  is_correct,
  response_time_ms,
  difficulty_rating
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, session_id, word_id, attempt_type, user_answer, correct_answer, is_correct, response_time_ms, difficulty_rating, created_at
`

type CreateLearningAttemptParams struct {
	SessionID        int32          `json:"session_id"`
	WordID           int32          `json:"word_id"`
	AttemptType      string         `json:"attempt_type"`
	UserAnswer       sql.NullString `json:"user_answer"`
	CorrectAnswer    string         `json:"correct_answer"`
	IsCorrect        bool           `json:"is_correct"`
	ResponseTimeMs   sql.NullInt32  `json:"response_time_ms"`
	DifficultyRating sql.NullInt32  `json:"difficulty_rating"`
}

func (q *Queries) CreateLearningAttempt(ctx context.Context, arg CreateLearningAttemptParams) (LearningAttempt, error) {
	row := q.db.QueryRowContext(ctx, createLearningAttempt,
		arg.SessionID,
		arg.WordID,
		arg.AttemptType,
		arg.UserAnswer,
		arg.CorrectAnswer,
		arg.IsCorrect,
		arg.ResponseTimeMs,
		arg.DifficultyRating,
	)
	var i LearningAttempt
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.WordID,
		&i.AttemptType,
		&i.UserAnswer,
		&i.CorrectAnswer,
		&i.IsCorrect,
		&i.ResponseTimeMs,
		&i.DifficultyRating,
		&i.CreatedAt,
	)
	return i, err
}

const createLearningSession = `-- name: CreateLearningSession :one

INSERT INTO learning_sessions (
  user_id,
  study_set_id,
  session_type,
  total_questions,
  session_data
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, study_set_id, session_type, started_at, completed_at, total_questions, correct_answers, session_data
`

type CreateLearningSessionParams struct {
	UserID         int32                 `json:"user_id"`
	StudySetID     sql.NullInt32         `json:"study_set_id"`
	SessionType    string                `json:"session_type"`
	TotalQuestions sql.NullInt32         `json:"total_questions"`
	SessionData    pqtype.NullRawMessage `json:"session_data"`
}

// Learning Sessions and Attempts Queries
func (q *Queries) CreateLearningSession(ctx context.Context, arg CreateLearningSessionParams) (LearningSession, error) {
	row := q.db.QueryRowContext(ctx, createLearningSession,
		arg.UserID,
		arg.StudySetID,
		arg.SessionType,
		arg.TotalQuestions,
		arg.SessionData,
	)
	var i LearningSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StudySetID,
		&i.SessionType,
		&i.StartedAt,
		&i.CompletedAt,
		&i.TotalQuestions,
		&i.CorrectAnswers,
		&i.SessionData,
	)
	return i, err
}

const deleteLearningSession = `-- name: DeleteLearningSession :exec
DELETE FROM learning_sessions
WHERE id = $1 AND user_id = $2
`

type DeleteLearningSessionParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteLearningSession(ctx context.Context, arg DeleteLearningSessionParams) error {
	_, err := q.db.ExecContext(ctx, deleteLearningSession, arg.ID, arg.UserID)
	return err
}

const getLearningAttempt = `-- name: GetLearningAttempt :one
SELECT id, session_id, word_id, attempt_type, user_answer, correct_answer, is_correct, response_time_ms, difficulty_rating, created_at FROM learning_attempts
WHERE id = $1
`

func (q *Queries) GetLearningAttempt(ctx context.Context, id int32) (LearningAttempt, error) {
	row := q.db.QueryRowContext(ctx, getLearningAttempt, id)
	var i LearningAttempt
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.WordID,
		&i.AttemptType,
		&i.UserAnswer,
		&i.CorrectAnswer,
		&i.IsCorrect,
		&i.ResponseTimeMs,
		&i.DifficultyRating,
		&i.CreatedAt,
	)
	return i, err
}

const getLearningSession = `-- name: GetLearningSession :one
SELECT id, user_id, study_set_id, session_type, started_at, completed_at, total_questions, correct_answers, session_data FROM learning_sessions
WHERE id = $1 AND user_id = $2
`

type GetLearningSessionParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetLearningSession(ctx context.Context, arg GetLearningSessionParams) (LearningSession, error) {
	row := q.db.QueryRowContext(ctx, getLearningSession, arg.ID, arg.UserID)
	var i LearningSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StudySetID,
		&i.SessionType,
		&i.StartedAt,
		&i.CompletedAt,
		&i.TotalQuestions,
		&i.CorrectAnswers,
		&i.SessionData,
	)
	return i, err
}

const getSessionStats = `-- name: GetSessionStats :one
SELECT 
  COUNT(*) as total_attempts,
  SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) as correct_attempts,
  AVG(response_time_ms) as avg_response_time,
  AVG(difficulty_rating) as avg_difficulty
FROM learning_attempts
WHERE session_id = $1
`

type GetSessionStatsRow struct {
	TotalAttempts   int64   `json:"total_attempts"`
	CorrectAttempts int64   `json:"correct_attempts"`
	AvgResponseTime float64 `json:"avg_response_time"`
	AvgDifficulty   float64 `json:"avg_difficulty"`
}

func (q *Queries) GetSessionStats(ctx context.Context, sessionID int32) (GetSessionStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionStats, sessionID)
	var i GetSessionStatsRow
	err := row.Scan(
		&i.TotalAttempts,
		&i.CorrectAttempts,
		&i.AvgResponseTime,
		&i.AvgDifficulty,
	)
	return i, err
}

const listSessionAttempts = `-- name: ListSessionAttempts :many
SELECT learning_attempts.id, learning_attempts.session_id, learning_attempts.word_id, learning_attempts.attempt_type, learning_attempts.user_answer, learning_attempts.correct_answer, learning_attempts.is_correct, learning_attempts.response_time_ms, learning_attempts.difficulty_rating, learning_attempts.created_at, words.id, words.word, words.pronounce, words.level, words.descript_level, words.short_mean, words.means, words.snym, words.freq, words.conjugation
FROM learning_attempts
JOIN words ON learning_attempts.word_id = words.id
WHERE learning_attempts.session_id = $1
ORDER BY learning_attempts.created_at
`

type ListSessionAttemptsRow struct {
	LearningAttempt LearningAttempt `json:"learning_attempt"`
	Word            Word            `json:"word"`
}

func (q *Queries) ListSessionAttempts(ctx context.Context, sessionID int32) ([]ListSessionAttemptsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionAttempts, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionAttemptsRow
	for rows.Next() {
		var i ListSessionAttemptsRow
		if err := rows.Scan(
			&i.LearningAttempt.ID,
			&i.LearningAttempt.SessionID,
			&i.LearningAttempt.WordID,
			&i.LearningAttempt.AttemptType,
			&i.LearningAttempt.UserAnswer,
			&i.LearningAttempt.CorrectAnswer,
			&i.LearningAttempt.IsCorrect,
			&i.LearningAttempt.ResponseTimeMs,
			&i.LearningAttempt.DifficultyRating,
			&i.LearningAttempt.CreatedAt,
			&i.Word.ID,
			&i.Word.Word,
			&i.Word.Pronounce,
			&i.Word.Level,
			&i.Word.DescriptLevel,
			&i.Word.ShortMean,
			&i.Word.Means,
			&i.Word.Snym,
			&i.Word.Freq,
			&i.Word.Conjugation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserLearningSessions = `-- name: ListUserLearningSessions :many
SELECT id, user_id, study_set_id, session_type, started_at, completed_at, total_questions, correct_answers, session_data FROM learning_sessions
WHERE user_id = $1
ORDER BY started_at DESC
LIMIT $2 OFFSET $3
`

type ListUserLearningSessionsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserLearningSessions(ctx context.Context, arg ListUserLearningSessionsParams) ([]LearningSession, error) {
	rows, err := q.db.QueryContext(ctx, listUserLearningSessions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LearningSession
	for rows.Next() {
		var i LearningSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StudySetID,
			&i.SessionType,
			&i.StartedAt,
			&i.CompletedAt,
			&i.TotalQuestions,
			&i.CorrectAnswers,
			&i.SessionData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLearningSession = `-- name: UpdateLearningSession :one
UPDATE learning_sessions
SET
  completed_at = $3,
  total_questions = $4,
  correct_answers = $5,
  session_data = $6
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, study_set_id, session_type, started_at, completed_at, total_questions, correct_answers, session_data
`

type UpdateLearningSessionParams struct {
	ID             int32                 `json:"id"`
	UserID         int32                 `json:"user_id"`
	CompletedAt    sql.NullTime          `json:"completed_at"`
	TotalQuestions sql.NullInt32         `json:"total_questions"`
	CorrectAnswers sql.NullInt32         `json:"correct_answers"`
	SessionData    pqtype.NullRawMessage `json:"session_data"`
}

func (q *Queries) UpdateLearningSession(ctx context.Context, arg UpdateLearningSessionParams) (LearningSession, error) {
	row := q.db.QueryRowContext(ctx, updateLearningSession,
		arg.ID,
		arg.UserID,
		arg.CompletedAt,
		arg.TotalQuestions,
		arg.CorrectAnswers,
		arg.SessionData,
	)
	var i LearningSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StudySetID,
		&i.SessionType,
		&i.StartedAt,
		&i.CompletedAt,
		&i.TotalQuestions,
		&i.CorrectAnswers,
		&i.SessionData,
	)
	return i, err
}
