// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: study_sets.sql

package db

import (
	"context"
	"database/sql"
)

const addWordToStudySet = `-- name: AddWordToStudySet :exec
INSERT INTO study_set_words (study_set_id, word_id)
VALUES ($1, $2)
ON CONFLICT (study_set_id, word_id) DO NOTHING
`

type AddWordToStudySetParams struct {
	StudySetID int32 `json:"study_set_id"`
	WordID     int32 `json:"word_id"`
}

func (q *Queries) AddWordToStudySet(ctx context.Context, arg AddWordToStudySetParams) error {
	_, err := q.db.ExecContext(ctx, addWordToStudySet, arg.StudySetID, arg.WordID)
	return err
}

const countWordsInStudySet = `-- name: CountWordsInStudySet :one
SELECT COUNT(*) FROM study_set_words
WHERE study_set_id = $1
`

func (q *Queries) CountWordsInStudySet(ctx context.Context, studySetID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countWordsInStudySet, studySetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStudySet = `-- name: CreateStudySet :one

INSERT INTO study_sets (
  user_id,
  name,
  description,
  is_public
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, name, description, is_public, created_at, updated_at
`

type CreateStudySetParams struct {
	UserID      int32          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsPublic    sql.NullBool   `json:"is_public"`
}

// Study Sets Queries
func (q *Queries) CreateStudySet(ctx context.Context, arg CreateStudySetParams) (StudySet, error) {
	row := q.db.QueryRowContext(ctx, createStudySet,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.IsPublic,
	)
	var i StudySet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudySet = `-- name: DeleteStudySet :exec
DELETE FROM study_sets
WHERE id = $1 AND user_id = $2
`

type DeleteStudySetParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteStudySet(ctx context.Context, arg DeleteStudySetParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudySet, arg.ID, arg.UserID)
	return err
}

const getStudySet = `-- name: GetStudySet :one
SELECT id, user_id, name, description, is_public, created_at, updated_at FROM study_sets
WHERE id = $1
`

func (q *Queries) GetStudySet(ctx context.Context, id int32) (StudySet, error) {
	row := q.db.QueryRowContext(ctx, getStudySet, id)
	var i StudySet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudySetWithWords = `-- name: GetStudySetWithWords :many
SELECT 
  study_sets.id, study_sets.user_id, study_sets.name, study_sets.description, study_sets.is_public, study_sets.created_at, study_sets.updated_at,
  words.id, words.word, words.pronounce, words.level, words.descript_level, words.short_mean, words.means, words.snym, words.freq, words.conjugation
FROM study_sets
LEFT JOIN study_set_words ON study_sets.id = study_set_words.study_set_id
LEFT JOIN words ON study_set_words.word_id = words.id
WHERE study_sets.id = $1
`

type GetStudySetWithWordsRow struct {
	StudySet StudySet `json:"study_set"`
	Word     Word     `json:"word"`
}

func (q *Queries) GetStudySetWithWords(ctx context.Context, id int32) ([]GetStudySetWithWordsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudySetWithWords, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudySetWithWordsRow
	for rows.Next() {
		var i GetStudySetWithWordsRow
		if err := rows.Scan(
			&i.StudySet.ID,
			&i.StudySet.UserID,
			&i.StudySet.Name,
			&i.StudySet.Description,
			&i.StudySet.IsPublic,
			&i.StudySet.CreatedAt,
			&i.StudySet.UpdatedAt,
			&i.Word.ID,
			&i.Word.Word,
			&i.Word.Pronounce,
			&i.Word.Level,
			&i.Word.DescriptLevel,
			&i.Word.ShortMean,
			&i.Word.Means,
			&i.Word.Snym,
			&i.Word.Freq,
			&i.Word.Conjugation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudySetWords = `-- name: GetStudySetWords :many
SELECT words.id, words.word, words.pronounce, words.level, words.descript_level, words.short_mean, words.means, words.snym, words.freq, words.conjugation
FROM words
JOIN study_set_words ON words.id = study_set_words.word_id
WHERE study_set_words.study_set_id = $1
ORDER BY study_set_words.created_at
`

type GetStudySetWordsRow struct {
	Word Word `json:"word"`
}

func (q *Queries) GetStudySetWords(ctx context.Context, studySetID int32) ([]GetStudySetWordsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudySetWords, studySetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudySetWordsRow
	for rows.Next() {
		var i GetStudySetWordsRow
		if err := rows.Scan(
			&i.Word.ID,
			&i.Word.Word,
			&i.Word.Pronounce,
			&i.Word.Level,
			&i.Word.DescriptLevel,
			&i.Word.ShortMean,
			&i.Word.Means,
			&i.Word.Snym,
			&i.Word.Freq,
			&i.Word.Conjugation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicStudySets = `-- name: ListPublicStudySets :many
SELECT id, user_id, name, description, is_public, created_at, updated_at FROM study_sets
WHERE is_public = TRUE
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type ListPublicStudySetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublicStudySets(ctx context.Context, arg ListPublicStudySetsParams) ([]StudySet, error) {
	rows, err := q.db.QueryContext(ctx, listPublicStudySets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudySet
	for rows.Next() {
		var i StudySet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserStudySets = `-- name: ListUserStudySets :many
SELECT id, user_id, name, description, is_public, created_at, updated_at FROM study_sets
WHERE user_id = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type ListUserStudySetsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserStudySets(ctx context.Context, arg ListUserStudySetsParams) ([]StudySet, error) {
	rows, err := q.db.QueryContext(ctx, listUserStudySets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudySet
	for rows.Next() {
		var i StudySet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWordFromStudySet = `-- name: RemoveWordFromStudySet :exec
DELETE FROM study_set_words
WHERE study_set_id = $1 AND word_id = $2
`

type RemoveWordFromStudySetParams struct {
	StudySetID int32 `json:"study_set_id"`
	WordID     int32 `json:"word_id"`
}

func (q *Queries) RemoveWordFromStudySet(ctx context.Context, arg RemoveWordFromStudySetParams) error {
	_, err := q.db.ExecContext(ctx, removeWordFromStudySet, arg.StudySetID, arg.WordID)
	return err
}

const updateStudySet = `-- name: UpdateStudySet :one
UPDATE study_sets
SET
  name = $2,
  description = $3,
  is_public = $4,
  updated_at = NOW()
WHERE id = $1 AND user_id = $5
RETURNING id, user_id, name, description, is_public, created_at, updated_at
`

type UpdateStudySetParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsPublic    sql.NullBool   `json:"is_public"`
	UserID      int32          `json:"user_id"`
}

func (q *Queries) UpdateStudySet(ctx context.Context, arg UpdateStudySetParams) (StudySet, error) {
	row := q.db.QueryRowContext(ctx, updateStudySet,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsPublic,
		arg.UserID,
	)
	var i StudySet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
