// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contents.sql

package db

import (
	"context"
)

const createContent = `-- name: CreateContent :one
INSERT INTO contents (
    part_id,
    type,
    description
) VALUES (
    $1, $2, $3
) RETURNING content_id, part_id, type, description
`

type CreateContentParams struct {
	PartID      int32  `json:"part_id"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) CreateContent(ctx context.Context, arg CreateContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, createContent, arg.PartID, arg.Type, arg.Description)
	var i Content
	err := row.Scan(
		&i.ContentID,
		&i.PartID,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM contents
WHERE content_id = $1
`

func (q *Queries) DeleteContent(ctx context.Context, contentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContent, contentID)
	return err
}

const getContent = `-- name: GetContent :one
SELECT content_id, part_id, type, description FROM contents
WHERE content_id = $1 LIMIT 1
`

func (q *Queries) GetContent(ctx context.Context, contentID int32) (Content, error) {
	row := q.db.QueryRowContext(ctx, getContent, contentID)
	var i Content
	err := row.Scan(
		&i.ContentID,
		&i.PartID,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const listContentsByPart = `-- name: ListContentsByPart :many
SELECT content_id, part_id, type, description FROM contents
WHERE part_id = $1
ORDER BY content_id
`

func (q *Queries) ListContentsByPart(ctx context.Context, partID int32) ([]Content, error) {
	rows, err := q.db.QueryContext(ctx, listContentsByPart, partID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ContentID,
			&i.PartID,
			&i.Type,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :one
UPDATE contents
SET
    part_id = $2,
    type = $3,
    description = $4
WHERE content_id = $1
RETURNING content_id, part_id, type, description
`

type UpdateContentParams struct {
	ContentID   int32  `json:"content_id"`
	PartID      int32  `json:"part_id"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) UpdateContent(ctx context.Context, arg UpdateContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, updateContent,
		arg.ContentID,
		arg.PartID,
		arg.Type,
		arg.Description,
	)
	var i Content
	err := row.Scan(
		&i.ContentID,
		&i.PartID,
		&i.Type,
		&i.Description,
	)
	return i, err
}
