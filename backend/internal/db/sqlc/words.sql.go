// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: words.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createWord = `-- name: CreateWord :one
INSERT INTO words (
    word,
    pronounce,
    level,
    descript_level,
    short_mean,
    means,
    snym,
    freq,
    conjugation
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, word, pronounce, level, descript_level, short_mean, means, snym, freq, conjugation
`

type CreateWordParams struct {
	Word          string                `json:"word"`
	Pronounce     string                `json:"pronounce"`
	Level         int32                 `json:"level"`
	DescriptLevel string                `json:"descript_level"`
	ShortMean     string                `json:"short_mean"`
	Means         pqtype.NullRawMessage `json:"means"`
	Snym          pqtype.NullRawMessage `json:"snym"`
	Freq          float32               `json:"freq"`
	Conjugation   pqtype.NullRawMessage `json:"conjugation"`
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord,
		arg.Word,
		arg.Pronounce,
		arg.Level,
		arg.DescriptLevel,
		arg.ShortMean,
		arg.Means,
		arg.Snym,
		arg.Freq,
		arg.Conjugation,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Word,
		&i.Pronounce,
		&i.Level,
		&i.DescriptLevel,
		&i.ShortMean,
		&i.Means,
		&i.Snym,
		&i.Freq,
		&i.Conjugation,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM words
WHERE id = $1
`

func (q *Queries) DeleteWord(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWord, id)
	return err
}

const getWord = `-- name: GetWord :one
SELECT id, word, pronounce, level, descript_level, short_mean, means, snym, freq, conjugation FROM words
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWord(ctx context.Context, id int32) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWord, id)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Word,
		&i.Pronounce,
		&i.Level,
		&i.DescriptLevel,
		&i.ShortMean,
		&i.Means,
		&i.Snym,
		&i.Freq,
		&i.Conjugation,
	)
	return i, err
}

const listWords = `-- name: ListWords :many
SELECT id, word, pronounce, level, descript_level, short_mean, means, snym, freq, conjugation FROM words
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWords(ctx context.Context, arg ListWordsParams) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, listWords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Word,
			&i.Pronounce,
			&i.Level,
			&i.DescriptLevel,
			&i.ShortMean,
			&i.Means,
			&i.Snym,
			&i.Freq,
			&i.Conjugation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchWords = `-- name: SearchWords :many
SELECT id, word, pronounce, level, descript_level, short_mean, means, snym, freq, conjugation FROM words
WHERE
    word ILIKE '%' || $1 || '%'
ORDER BY level, freq DESC, id
LIMIT $2
OFFSET $3
`

type SearchWordsParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchWords(ctx context.Context, arg SearchWordsParams) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, searchWords, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Word,
			&i.Pronounce,
			&i.Level,
			&i.DescriptLevel,
			&i.ShortMean,
			&i.Means,
			&i.Snym,
			&i.Freq,
			&i.Conjugation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWord = `-- name: UpdateWord :one
UPDATE words
SET
    word = $2,
    pronounce = $3,
    level = $4,
    descript_level = $5,
    short_mean = $6,
    means = $7,
    snym = $8,
    freq = $9,
    conjugation = $10
WHERE id = $1
RETURNING id, word, pronounce, level, descript_level, short_mean, means, snym, freq, conjugation
`

type UpdateWordParams struct {
	ID            int32                 `json:"id"`
	Word          string                `json:"word"`
	Pronounce     string                `json:"pronounce"`
	Level         int32                 `json:"level"`
	DescriptLevel string                `json:"descript_level"`
	ShortMean     string                `json:"short_mean"`
	Means         pqtype.NullRawMessage `json:"means"`
	Snym          pqtype.NullRawMessage `json:"snym"`
	Freq          float32               `json:"freq"`
	Conjugation   pqtype.NullRawMessage `json:"conjugation"`
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, updateWord,
		arg.ID,
		arg.Word,
		arg.Pronounce,
		arg.Level,
		arg.DescriptLevel,
		arg.ShortMean,
		arg.Means,
		arg.Snym,
		arg.Freq,
		arg.Conjugation,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Word,
		&i.Pronounce,
		&i.Level,
		&i.DescriptLevel,
		&i.ShortMean,
		&i.Means,
		&i.Snym,
		&i.Freq,
		&i.Conjugation,
	)
	return i, err
}
