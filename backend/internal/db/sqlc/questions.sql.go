// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
    content_id,
    title,
    media_url,
    image_url,
    possible_answers,
    true_answer,
    explanation,
    keywords
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING question_id, content_id, title, media_url, image_url, possible_answers, true_answer, explanation, keywords
`

type CreateQuestionParams struct {
	ContentID       int32          `json:"content_id"`
	Title           string         `json:"title"`
	MediaUrl        sql.NullString `json:"media_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PossibleAnswers []string       `json:"possible_answers"`
	TrueAnswer      string         `json:"true_answer"`
	Explanation     string         `json:"explanation"`
	Keywords        sql.NullString `json:"keywords"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.ContentID,
		arg.Title,
		arg.MediaUrl,
		arg.ImageUrl,
		pq.Array(arg.PossibleAnswers),
		arg.TrueAnswer,
		arg.Explanation,
		arg.Keywords,
	)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.ContentID,
		&i.Title,
		&i.MediaUrl,
		&i.ImageUrl,
		pq.Array(&i.PossibleAnswers),
		&i.TrueAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE question_id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, questionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, questionID)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT question_id, content_id, title, media_url, image_url, possible_answers, true_answer, explanation, keywords FROM questions
WHERE question_id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, questionID int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, questionID)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.ContentID,
		&i.Title,
		&i.MediaUrl,
		&i.ImageUrl,
		pq.Array(&i.PossibleAnswers),
		&i.TrueAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}

const listQuestionsByContent = `-- name: ListQuestionsByContent :many
SELECT question_id, content_id, title, media_url, image_url, possible_answers, true_answer, explanation, keywords FROM questions
WHERE content_id = $1
ORDER BY question_id
`

func (q *Queries) ListQuestionsByContent(ctx context.Context, contentID int32) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionsByContent, contentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.ContentID,
			&i.Title,
			&i.MediaUrl,
			&i.ImageUrl,
			pq.Array(&i.PossibleAnswers),
			&i.TrueAnswer,
			&i.Explanation,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
    content_id = $2,
    title = $3,
    media_url = $4,
    image_url = $5,
    possible_answers = $6,
    true_answer = $7,
    explanation = $8,
    keywords = $9
WHERE question_id = $1
RETURNING question_id, content_id, title, media_url, image_url, possible_answers, true_answer, explanation, keywords
`

type UpdateQuestionParams struct {
	QuestionID      int32          `json:"question_id"`
	ContentID       int32          `json:"content_id"`
	Title           string         `json:"title"`
	MediaUrl        sql.NullString `json:"media_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PossibleAnswers []string       `json:"possible_answers"`
	TrueAnswer      string         `json:"true_answer"`
	Explanation     string         `json:"explanation"`
	Keywords        sql.NullString `json:"keywords"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion,
		arg.QuestionID,
		arg.ContentID,
		arg.Title,
		arg.MediaUrl,
		arg.ImageUrl,
		pq.Array(arg.PossibleAnswers),
		arg.TrueAnswer,
		arg.Explanation,
		arg.Keywords,
	)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.ContentID,
		&i.Title,
		&i.MediaUrl,
		&i.ImageUrl,
		pq.Array(&i.PossibleAnswers),
		&i.TrueAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}
