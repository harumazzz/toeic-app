version: '3.8'

services:
  # Database service
  postgres:
    image: postgres:14-alpine
    container_name: toeic_postgres_prod
    environment:
      - POSTGRES_USER=${DB_USER:-root}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_DB=${DB_NAME:-toeic_db}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-root} -d ${DB_NAME:-toeic_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - toeic_network
  # Redis cache service (optional)
  redis:
    image: redis:7-alpine
    container_name: toeic_redis_prod
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --appendonly yes --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server --appendonly yes
      fi
      "
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - toeic_network
    profiles:
      - with-redis

  # Backend application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: toeic_app_prod
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-toeic_db}
      
      # Server configuration - bind to all interfaces in container
      - SERVER_ADDRESS=0.0.0.0:8000
      - GIN_MODE=${GIN_MODE:-release}
      
      # JWT configuration
      - TOKEN_SYMMETRIC_KEY=${TOKEN_SYMMETRIC_KEY}
      - ACCESS_TOKEN_DURATION=${ACCESS_TOKEN_DURATION:-3600}
      - REFRESH_TOKEN_DURATION=${REFRESH_TOKEN_DURATION:-604800}
      
      # External services
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      
      # Rate limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-10}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-20}
      - RATE_LIMIT_EXPIRES_IN=${RATE_LIMIT_EXPIRES_IN:-3600}
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # Cache configuration
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_TYPE=${CACHE_TYPE:-memory}
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Performance settings
      - CONCURRENCY_ENABLED=${CONCURRENCY_ENABLED:-true}
      - MAX_CONCURRENT_DB_OPS=${MAX_CONCURRENT_DB_OPS:-100}
      - MAX_CONCURRENT_HTTP_OPS=${MAX_CONCURRENT_HTTP_OPS:-200}
      
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - ./logs:/root/logs
      - ./backups:/root/backups
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - toeic_network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: toeic_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - toeic_network
    profiles:
      - with-nginx

volumes:
  postgres_data:
  redis_data:

networks:
  toeic_network:
    driver: bridge
