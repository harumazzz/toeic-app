version: '3.8'

services:
  # Application database
  postgres:
    image: postgres:14-alpine
    container_name: toeic_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: toeic_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: toeic_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: always
    depends_on:
      - app

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: toeic_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    restart: always
    depends_on:
      - prometheus

  # Alertmanager for alert management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: toeic_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: always

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: toeic_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: always

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: toeic_redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: always
    depends_on:
      - redis

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: toeic_postgres_exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
    restart: always
    depends_on:
      - postgres

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: toeic_app
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - REDIS_ADDR=redis:6379
      - CACHE_ENABLED=true
      - CACHE_TYPE=redis
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database admin interface
  adminer:
    image: adminer
    container_name: toeic_adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  # Log aggregation with Loki (lightweight alternative to ELK)
  loki:
    image: grafana/loki:latest
    container_name: toeic_loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/loki.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    restart: always

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: toeic_promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/promtail.yml
      - ./logs:/var/log/app:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/promtail.yml
    restart: always
    depends_on:
      - loki

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:

networks:
  default:
    name: toeic_network
