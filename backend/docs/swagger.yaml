definitions:
  api.ExampleResponse:
    properties:
      id:
        type: integer
      meaning:
        type: string
      title:
        type: string
    type: object
  api.GrammarJSONField:
    properties:
      raw: {}
    type: object
  api.GrammarResponse:
    properties:
      contents:
        type: object
      grammar_key:
        type: string
      id:
        type: integer
      level:
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  api.HealthCheckResponse:
    properties:
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  api.MemStats:
    properties:
      alloc:
        type: integer
      num_gc:
        type: integer
      pause_total_ns:
        type: integer
      sys:
        type: integer
      total_alloc:
        type: integer
    type: object
  api.MetricsResponse:
    properties:
      mem_stats:
        $ref: '#/definitions/api.MemStats'
      num_goroutine:
        type: integer
      timestamp:
        type: string
      uptime:
        type: string
    type: object
  api.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  api.UserResponse:
    properties:
      created_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  api.WordJSONField:
    properties:
      raw: {}
    type: object
  api.WordResponse:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    type: object
  api.createExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.createGrammarRequest:
    properties:
      contents:
        $ref: '#/definitions/api.GrammarJSONField'
      grammar_key:
        type: string
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - contents
    - grammar_key
    - level
    - related
    - tag
    - title
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.createWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    required:
    - descript_level
    - freq
    - level
    - pronounce
    - short_mean
    - word
    type: object
  api.loginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.refreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.refreshTokenResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.registerUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.registerUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.updateExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.updateGrammarRequest:
    properties:
      contents:
        $ref: '#/definitions/api.GrammarJSONField'
      grammar_key:
        type: string
      id:
        minimum: 1
        type: integer
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - id
    type: object
  api.updateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  api.updateWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      id:
        minimum: 1
        type: integer
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    required:
    - id
    type: object
info:
  contact: {}
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.loginUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Login user
      tags:
      - auth
  /api/refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/api.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.refreshTokenResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Refresh access token
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return authentication tokens
      parameters:
      - description: Registration information
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/api.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.registerUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Register a new user
      tags:
      - auth
  /api/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination. Allows for browsing through
        users.
      parameters:
      - default: 10
        description: Number of users to return per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user listing
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system. This endpoint is typically used
        for user registration.
      parameters:
      - description: User information for registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or validation failure
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user creation
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID.
      parameters:
      - description: User ID of the user to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user deletion
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user's details by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user retrieval
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information by their ID.
      parameters:
      - description: User ID of the user to update
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update. Only provided fields are updated.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user update
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /api/v1/grammars:
    get:
      consumes:
      - application/json
      description: Get a list of grammars with pagination.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars
      tags:
      - grammars
    post:
      consumes:
      - application/json
      description: Add a new grammar to the database.
      parameters:
      - description: Grammar object to create
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.createGrammarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Grammar created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new grammar
      tags:
      - grammars
  /api/v1/grammars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a grammar
      tags:
      - grammars
    get:
      consumes:
      - application/json
      description: Retrieve a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammar
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a grammar by ID
      tags:
      - grammars
    put:
      consumes:
      - application/json
      description: Update an existing grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      - description: Grammar object with fields to update
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.updateGrammarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Grammar updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body or grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a grammar
      tags:
      - grammars
  /api/v1/grammars/level:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by level, with pagination.
      parameters:
      - description: Level to filter by
        in: query
        name: level
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by level
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars by level
      tags:
      - grammars
  /api/v1/grammars/random:
    get:
      consumes:
      - application/json
      description: Retrieve a single random grammar entry from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Random grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "500":
          description: Failed to retrieve random grammar
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a random grammar
      tags:
      - grammars
  /api/v1/grammars/search:
    get:
      consumes:
      - application/json
      description: Search grammars by title, key, or tag, with pagination.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to search grammars
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search grammars
      tags:
      - grammars
  /api/v1/grammars/tag:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by a specific tag, with pagination.
      parameters:
      - description: Tag to filter by
        in: query
        name: tag
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by tag
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars by tag
      tags:
      - grammars
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "401":
          description: Unauthorized if the user is not authenticated
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error when retrieving user profile
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
  /api/v1/words:
    get:
      consumes:
      - application/json
      description: List words with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of words
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to list words
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List words
      tags:
      - words
    post:
      consumes:
      - application/json
      description: Create a new word with the input payload
      parameters:
      - description: Create Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.createWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Word created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new word
      tags:
      - words
  /api/v1/words/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a word
      tags:
      - words
    get:
      consumes:
      - application/json
      description: Get a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to get word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a word by ID
      tags:
      - words
    put:
      consumes:
      - application/json
      description: Update a word with the input payload
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.updateWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a word
      tags:
      - words
  /examples:
    get:
      description: Get a list of all examples
      produces:
      - application/json
      responses:
        "200":
          description: Examples retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExampleResponse'
                  type: array
              type: object
        "500":
          description: Failed to retrieve examples
          schema:
            $ref: '#/definitions/api.Response'
      summary: List examples
      tags:
      - examples
    post:
      consumes:
      - application/json
      description: Create a new example
      parameters:
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createExampleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Example created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create example
      tags:
      - examples
  /examples/{id}:
    delete:
      description: Delete an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Example deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete example
      tags:
      - examples
    get:
      description: Get details of an example by its ID
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Example retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve example
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get example by ID
      tags:
      - examples
    put:
      consumes:
      - application/json
      description: Update an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body or example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update example
      tags:
      - examples
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API server is running
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.HealthCheckResponse'
              type: object
      summary: Health check
      tags:
      - health
  /metrics:
    get:
      consumes:
      - application/json
      description: Get system metrics and health information
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.MetricsResponse'
              type: object
      summary: Get system metrics
      tags:
      - monitoring
swagger: "2.0"
