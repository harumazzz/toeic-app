definitions:
  analyze.Suggestion:
    properties:
      definition:
        type: string
      level:
        type: string
      word:
        type: string
    type: object
  analyze.TextAnalysisResponse:
    properties:
      words:
        items:
          $ref: '#/definitions/analyze.WordAnalysis'
        type: array
    type: object
  analyze.WordAnalysis:
    properties:
      count:
        type: integer
      level:
        type: string
      suggestions:
        items:
          $ref: '#/definitions/analyze.Suggestion'
        type: array
      word:
        type: string
    type: object
  api.AssignRoleRequest:
    properties:
      expires_at:
        description: Unix timestamp
        type: integer
      role_id:
        minimum: 1
        type: integer
      user_id:
        minimum: 1
        type: integer
    required:
    - role_id
    - user_id
    type: object
  api.AttemptAnswersResponse:
    properties:
      answers:
        items:
          $ref: '#/definitions/api.UserAnswerWithQuestionResponse'
        type: array
      attempt_id:
        type: integer
      correct_count:
        type: integer
      total_answered:
        type: integer
    type: object
  api.AttemptScoreResponse:
    properties:
      attempt_id:
        type: integer
      calculated_score:
        type: number
      correct_answers:
        type: integer
      total_questions:
        type: integer
    type: object
  api.BulkUserAnswerRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/api.UserAnswerSubmission'
        minItems: 1
        type: array
      attempt_id:
        minimum: 1
        type: integer
    required:
    - answers
    - attempt_id
    type: object
  api.BulkUserAnswerResponse:
    properties:
      answers:
        items:
          $ref: '#/definitions/api.UserAnswerResponse'
        type: array
      attempt_id:
        type: integer
      failed_answers:
        items:
          $ref: '#/definitions/api.FailedAnswerSubmission'
        type: array
      score:
        $ref: '#/definitions/api.AttemptScoreResponse'
      total_correct:
        type: integer
      total_submitted:
        type: integer
    type: object
  api.CacheStats:
    properties:
      basic_stats:
        additionalProperties: true
        type: object
      enabled:
        type: boolean
      http_cache:
        additionalProperties: true
        type: object
      type:
        type: string
    type: object
  api.CheckPermissionRequest:
    properties:
      permission:
        type: string
      user_id:
        minimum: 1
        type: integer
    required:
    - permission
    - user_id
    type: object
  api.ConjugationData:
    properties:
      htd:
        allOf:
        - $ref: '#/definitions/api.WordState'
        description: simplePresent
      htht:
        allOf:
        - $ref: '#/definitions/api.WordState'
        description: presentParticiple
      httd:
        allOf:
        - $ref: '#/definitions/api.WordState'
        description: presentContinuous
      qkd:
        allOf:
        - $ref: '#/definitions/api.WordState'
        description: simplePast
    type: object
  api.ContentModel:
    properties:
      anto:
        items:
          type: string
        type: array
      syno:
        items:
          type: string
        type: array
    type: object
  api.ContentResponse:
    properties:
      content_id:
        type: integer
      description:
        type: string
      part_id:
        type: integer
      type:
        type: string
    type: object
  api.CreateRoleRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - name
    type: object
  api.DatabaseStats:
    properties:
      idle:
        type: integer
      in_use:
        type: integer
      max_idle_closed:
        type: integer
      max_lifetime:
        description: Duration as string for Swagger compatibility
        type: string
      open_connections:
        type: integer
      wait_count:
        type: integer
      wait_duration:
        description: Duration as string for Swagger compatibility
        type: string
    type: object
  api.ExamAttemptResponse:
    properties:
      attempt_id:
        type: integer
      created_at:
        type: string
      end_time:
        type: string
      exam_id:
        type: integer
      score:
        description: Using string for NUMERIC precision
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/db.ExamStatusEnum'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api.ExamAttemptStatsResponse:
    properties:
      abandoned_attempts:
        type: integer
      average_score:
        type: string
      completed_attempts:
        type: integer
      highest_score:
        type: string
      in_progress_attempts:
        type: integer
      lowest_score:
        type: string
      total_attempts:
        type: integer
    type: object
  api.ExamContentWithQuestions:
    properties:
      content_id:
        type: integer
      description:
        type: string
      questions:
        items:
          $ref: '#/definitions/api.QuestionResponse'
        type: array
      type:
        type: string
    type: object
  api.ExamPartWithQuestions:
    properties:
      contents:
        items:
          $ref: '#/definitions/api.ExamContentWithQuestions'
        type: array
      part_id:
        type: integer
      title:
        type: string
    type: object
  api.ExamQuestionsResponse:
    properties:
      exam_id:
        type: integer
      exam_title:
        type: string
      parts:
        items:
          $ref: '#/definitions/api.ExamPartWithQuestions'
        type: array
      total_questions:
        type: integer
    type: object
  api.ExamResponse:
    properties:
      exam_id:
        type: integer
      is_unlocked:
        type: boolean
      time_limit_minutes:
        type: integer
      title:
        type: string
    type: object
  api.ExampleResponse:
    properties:
      id:
        type: integer
      meaning:
        type: string
      title:
        type: string
    type: object
  api.FailedAnswerSubmission:
    properties:
      error:
        type: string
      question_id:
        type: integer
      selected_answer:
        type: string
    type: object
  api.FlashcardQuestion:
    properties:
      level:
        type: integer
      meaning:
        type: string
      pronunciation:
        type: string
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.FlashcardSessionData:
    properties:
      questions:
        items:
          $ref: '#/definitions/api.FlashcardQuestion'
        type: array
    type: object
  api.GrammarContent:
    properties:
      content:
        items:
          $ref: '#/definitions/api.GrammarContentElement'
        type: array
      sub_title:
        type: string
    type: object
  api.GrammarContentElement:
    properties:
      c:
        type: string
      e:
        items:
          $ref: '#/definitions/api.GrammarExample'
        type: array
      f:
        items:
          type: string
        type: array
    type: object
  api.GrammarExample:
    properties:
      e:
        type: string
    type: object
  api.GrammarResponse:
    properties:
      contents:
        items:
          $ref: '#/definitions/api.GrammarContent'
        type: array
      grammar_key:
        type: string
      id:
        type: integer
      level:
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  api.HealthCheckResponse:
    properties:
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  api.I18nStatsResponse:
    properties:
      current_language:
        type: string
      fallback_language:
        type: string
      languages:
        additionalProperties:
          $ref: '#/definitions/api.LanguageResponse'
        type: object
      statistics:
        additionalProperties: true
        type: object
      supported_languages:
        type: integer
    type: object
  api.IndexStats:
    properties:
      grammars_indexes:
        items:
          type: string
        type: array
      total_indexes:
        type: integer
      words_indexes:
        items:
          type: string
        type: array
    type: object
  api.LanguageResponse:
    properties:
      code:
        type: string
      currently_used:
        type: boolean
      is_default:
        type: boolean
      is_supported:
        type: boolean
      message_count:
        type: integer
      name:
        type: string
      native_name:
        type: string
    type: object
  api.LeaderboardEntry:
    properties:
      end_time:
        type: string
      rank:
        type: integer
      score:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  api.LearningAttemptResponse:
    properties:
      attempt_type:
        type: string
      correct_answer:
        type: string
      created_at:
        type: string
      difficulty_rating:
        type: integer
      id:
        type: integer
      is_correct:
        type: boolean
      response_time_ms:
        type: integer
      session_id:
        type: integer
      user_answer:
        type: string
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.LearningProgressResponse:
    properties:
      average_mastery:
        type: number
      mastered_words:
        type: integer
      overall_accuracy:
        type: number
      total_attempts:
        type: integer
      total_correct:
        type: integer
      total_study_time_hours:
        type: number
      total_study_time_ms:
        type: integer
      total_words_studied:
        type: integer
    type: object
  api.LearningSessionResponse:
    properties:
      completed_at:
        type: string
      correct_answers:
        type: integer
      id:
        type: integer
      session_data:
        $ref: '#/definitions/api.SessionData'
      session_type:
        type: string
      started_at:
        type: string
      study_set_id:
        type: integer
      total_questions:
        type: integer
      user_id:
        type: integer
    type: object
  api.MasteryDistribution:
    properties:
      mastery_level:
        type: integer
      word_count:
        type: integer
    type: object
  api.MatchPair:
    properties:
      meaning:
        type: string
      position:
        type: integer
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.MatchSessionData:
    properties:
      pairs:
        items:
          $ref: '#/definitions/api.MatchPair'
        type: array
    type: object
  api.MeanModel:
    properties:
      examples:
        items:
          type: integer
        type: array
      mean:
        type: string
    type: object
  api.MeaningData:
    properties:
      kind:
        type: string
      means:
        items:
          $ref: '#/definitions/api.MeanModel'
        type: array
    type: object
  api.MemStats:
    properties:
      alloc:
        type: integer
      num_gc:
        type: integer
      pause_total_ns:
        type: integer
      sys:
        type: integer
      total_alloc:
        type: integer
    type: object
  api.MemoryStats:
    properties:
      alloc_mb:
        type: integer
      goroutines:
        type: integer
      heap_inuse_mb:
        type: integer
      heap_objects:
        type: integer
      num_gc:
        type: integer
      sys_mb:
        type: integer
      total_alloc_mb:
        type: integer
    type: object
  api.MessageRequest:
    properties:
      key:
        type: string
      message:
        type: string
    required:
    - key
    - message
    type: object
  api.MessagesRequest:
    properties:
      messages:
        additionalProperties:
          type: string
        type: object
    required:
    - messages
    type: object
  api.MetricsResponse:
    properties:
      blacklisted_tokens:
        type: integer
      mem_stats:
        $ref: '#/definitions/api.MemStats'
      num_goroutine:
        type: integer
      timestamp:
        type: string
      uptime:
        type: string
    type: object
  api.MultipleChoiceQuestion:
    properties:
      correct_answer:
        type: string
      options:
        items:
          type: string
        type: array
      pronunciation:
        type: string
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.PartResponse:
    properties:
      exam_id:
        type: integer
      part_id:
        type: integer
      title:
        type: string
    type: object
  api.PerformanceStats:
    properties:
      background_tasks:
        additionalProperties: true
        type: object
      cache:
        $ref: '#/definitions/api.CacheStats'
      database:
        $ref: '#/definitions/api.DatabaseStats'
      indexes:
        $ref: '#/definitions/api.IndexStats'
      memory:
        $ref: '#/definitions/api.MemoryStats'
      request_time:
        type: string
      server:
        $ref: '#/definitions/api.ServerStats'
    type: object
  api.PermissionCheckResponse:
    properties:
      action:
        type: string
      has_permission:
        type: boolean
      permission:
        type: string
      resource:
        type: string
      user_id:
        type: integer
    type: object
  api.PermissionResponse:
    properties:
      action:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      resource:
        type: string
    type: object
  api.QuestionResponse:
    properties:
      content_id:
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        type: array
      question_id:
        type: integer
      title:
        type: string
      true_answer:
        type: string
    type: object
  api.QuizSessionData:
    properties:
      questions:
        items:
          $ref: '#/definitions/api.MultipleChoiceQuestion'
        type: array
    type: object
  api.Response:
    properties:
      data: {}
      error:
        type: string
      language:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  api.RoleResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/api.PermissionResponse'
        type: array
      updated_at:
        type: string
    type: object
  api.SecurityConfig:
    properties:
      max_timestamp_age:
        description: Maximum timestamp age in seconds
        type: integer
      required_headers:
        description: List of required headers
        items:
          type: string
        type: array
      secret_key:
        description: Client-side security secret
        type: string
      security_level:
        description: Required security level
        type: integer
      wasm_enabled:
        description: WASM support enabled
        type: boolean
      web_worker_enabled:
        description: Web worker support enabled
        type: boolean
    type: object
  api.ServerStats:
    properties:
      compression_enabled:
        type: boolean
      http_cache_enabled:
        type: boolean
      rate_limit_enabled:
        type: boolean
      uptime:
        description: Duration as string for Swagger compatibility
        type: string
    type: object
  api.SessionConfig:
    properties:
      allow_partial:
        description: Whether to allow partial credit for typing
        type: boolean
      case_sensitive:
        description: Whether typing answers are case sensitive
        type: boolean
      show_hints:
        description: Whether to show hints
        type: boolean
      shuffle_answers:
        description: Whether to shuffle multiple choice answers
        type: boolean
      time_limit:
        description: Time limit in seconds
        type: integer
    type: object
  api.SessionData:
    properties:
      final_stats:
        $ref: '#/definitions/api.SessionStats'
      flashcard:
        $ref: '#/definitions/api.FlashcardSessionData'
      match:
        $ref: '#/definitions/api.MatchSessionData'
      quiz:
        $ref: '#/definitions/api.QuizSessionData'
      type:
        $ref: '#/definitions/api.TypeSessionData'
    type: object
  api.SessionStats:
    properties:
      accuracy_percentage:
        type: number
      avg_difficulty:
        type: number
      avg_response_time:
        type: number
      correct_attempts:
        type: integer
      total_attempts:
        type: integer
    type: object
  api.SpeakingSessionResponse:
    properties:
      end_time:
        type: string
      id:
        type: integer
      session_topic:
        type: string
      start_time:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api.SpeakingTurnResponse:
    properties:
      ai_evaluation:
        type: object
      ai_score:
        type: number
      audio_recording_path:
        type: string
      id:
        type: integer
      session_id:
        type: integer
      speaker_type:
        type: string
      text_spoken:
        type: string
      timestamp:
        type: string
    type: object
  api.StudySetResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      word_count:
        type: integer
    type: object
  api.StudySetWithWordsResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      word_count:
        type: integer
      words:
        items:
          $ref: '#/definitions/api.WordResponse'
        type: array
    type: object
  api.SynonymData:
    properties:
      content:
        items:
          $ref: '#/definitions/api.ContentModel'
        type: array
      kind:
        type: string
    type: object
  api.TypeSessionData:
    properties:
      questions:
        items:
          $ref: '#/definitions/api.FlashcardQuestion'
        type: array
    type: object
  api.UpdateRoleRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - name
    type: object
  api.UserAnswerResponse:
    properties:
      answer_time:
        type: string
      attempt_id:
        type: integer
      created_at:
        type: string
      is_correct:
        type: boolean
      question_id:
        type: integer
      selected_answer:
        type: string
      user_answer_id:
        type: integer
    type: object
  api.UserAnswerSubmission:
    properties:
      question_id:
        minimum: 1
        type: integer
      selected_answer:
        type: string
    required:
    - question_id
    - selected_answer
    type: object
  api.UserAnswerWithQuestionResponse:
    properties:
      answer_time:
        type: string
      attempt_id:
        type: integer
      created_at:
        type: string
      explanation:
        type: string
      is_correct:
        type: boolean
      possible_answers:
        items:
          type: string
        type: array
      question_id:
        type: integer
      question_title:
        type: string
      selected_answer:
        type: string
      true_answer:
        type: string
      user_answer_id:
        type: integer
    type: object
  api.UserResponse:
    properties:
      created_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  api.UserRoleAssignmentResponse:
    properties:
      assigned_at:
        type: string
      assigned_by:
        type: integer
      expires_at:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      user_id:
        type: integer
    type: object
  api.UserWordProgressResponse:
    properties:
      created_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      ease_factor:
        type: number
      interval_days:
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        type: integer
      updated_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      user_id:
        type: integer
      word_id:
        type: integer
    type: object
  api.UserWritingResponse:
    description: Response object for user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      evaluated_at:
        type: string
      id:
        type: integer
      prompt_id:
        type: integer
      submission_text:
        type: string
      submitted_at:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api.VocabularyStatsResponse:
    properties:
      accuracy_percentage:
        type: number
      avg_response_time_ms:
        type: number
      correct_attempts:
        type: integer
      created_at:
        type: string
      last_attempt_at:
        type: string
      mastery_level:
        type: integer
      total_attempts:
        type: integer
      total_response_time_ms:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.WordForReviewResponse:
    properties:
      accuracy_percentage:
        type: number
      avg_response_time_ms:
        type: number
      conjugation:
        $ref: '#/definitions/api.ConjugationData'
      correct_attempts:
        type: integer
      created_at:
        type: string
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      last_attempt_at:
        type: string
      level:
        type: integer
      mastery_level:
        type: integer
      means:
        items:
          $ref: '#/definitions/api.MeaningData'
        type: array
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        items:
          $ref: '#/definitions/api.SynonymData'
        type: array
      total_attempts:
        type: integer
      total_response_time_ms:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
      word:
        type: string
      word_id:
        type: integer
    type: object
  api.WordProgressResponse:
    properties:
      conjugation:
        $ref: '#/definitions/api.ConjugationData'
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      level:
        type: integer
      means:
        items:
          $ref: '#/definitions/api.MeaningData'
        type: array
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        items:
          $ref: '#/definitions/api.SynonymData'
        type: array
      word:
        type: string
    type: object
  api.WordResponse:
    properties:
      conjugation:
        $ref: '#/definitions/api.ConjugationData'
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      level:
        type: integer
      means:
        items:
          $ref: '#/definitions/api.MeaningData'
        type: array
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        items:
          $ref: '#/definitions/api.SynonymData'
        type: array
      word:
        type: string
    type: object
  api.WordState:
    properties:
      p:
        type: string
      w:
        type: string
    type: object
  api.WordWithProgressResponse:
    properties:
      progress:
        $ref: '#/definitions/api.UserWordProgressResponse'
      word:
        $ref: '#/definitions/api.WordProgressResponse'
    type: object
  api.WritingPromptResponse:
    properties:
      created_at:
        type: string
      difficulty_level:
        type: string
      id:
        type: integer
      prompt_text:
        type: string
      topic:
        type: string
      user_id:
        type: integer
    type: object
  api.addScheduleRequest:
    properties:
      backup_type:
        type: string
      description:
        type: string
      id:
        type: string
      schedule:
        type: string
    required:
    - description
    - id
    - schedule
    type: object
  api.addVersionRequest:
    properties:
      changes:
        items:
          type: string
        type: array
      deprecated:
        items:
          type: string
        type: array
      description:
        type: string
      downloads:
        additionalProperties:
          type: string
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      min_version:
        type: string
      required:
        type: boolean
      title:
        type: string
      version:
        type: string
    required:
    - description
    - title
    - version
    type: object
  api.addWordToStudySetRequest:
    properties:
      word_id:
        minimum: 1
        type: integer
    required:
    - word_id
    type: object
  api.analyzeMultipleTextsRequest:
    properties:
      min_synonym_level:
        type: string
      texts:
        items:
          type: string
        type: array
    required:
    - texts
    type: object
  api.analyzeTextRequest:
    properties:
      async:
        type: boolean
      min_synonym_level:
        type: string
      text:
        type: string
    required:
    - text
    type: object
  api.analyzeTextResponse:
    properties:
      cached:
        type: boolean
      error:
        type: string
      result:
        $ref: '#/definitions/analyze.TextAnalysisResponse'
      text:
        type: string
      timestamp:
        type: string
      user_id:
        type: integer
    type: object
  api.backupActivityItem:
    properties:
      action:
        description: backup, restore, cleanup
        type: string
      description:
        type: string
      duration:
        type: string
      filename:
        type: string
      size:
        type: integer
      status:
        description: success, failure, warning
        type: string
      timestamp:
        type: string
    type: object
  api.backupConfigSummary:
    properties:
      compress_backups:
        type: boolean
      encrypt_backups:
        type: boolean
      max_backup_count:
        type: integer
      retention_days:
        type: integer
      storage_type:
        type: string
      validate_backups:
        type: boolean
    type: object
  api.backupHealthStatus:
    properties:
      issues:
        items:
          type: string
        type: array
      last_check:
        type: string
      overall:
        description: healthy, warning, critical
        type: string
    type: object
  api.backupHistoryItem:
    properties:
      description:
        type: string
      duration:
        type: string
      error:
        type: string
      filename:
        type: string
      operation:
        type: string
      size:
        type: integer
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  api.backupHistoryResponse:
    properties:
      history:
        items:
          $ref: '#/definitions/api.backupHistoryItem'
        type: array
      total:
        type: integer
    type: object
  api.backupListItem:
    properties:
      created_at:
        type: string
      description:
        type: string
      download_url:
        type: string
      filename:
        type: string
      size:
        type: integer
    type: object
  api.backupRequest:
    properties:
      description:
        type: string
      filename:
        type: string
    type: object
  api.backupResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      download_url:
        type: string
      filename:
        type: string
      size:
        type: integer
    type: object
  api.backupStatusResponse:
    properties:
      auto_backup:
        type: boolean
      configuration:
        $ref: '#/definitions/api.backupConfigSummary'
      enabled:
        type: boolean
      health:
        $ref: '#/definitions/api.backupHealthStatus'
      last_backup:
        type: string
      next_backup:
        type: string
      oldest_backup:
        type: string
      recent_activity:
        items:
          $ref: '#/definitions/api.backupActivityItem'
        type: array
      total_backups:
        type: integer
      total_size:
        type: integer
    type: object
  api.backupValidationResponse:
    properties:
      checksum_match:
        type: boolean
      file_exists:
        type: boolean
      filename:
        type: string
      issues:
        items:
          type: string
        type: array
      last_modified:
        type: string
      readable_file:
        type: boolean
      size:
        type: integer
      valid:
        type: boolean
      valid_structure:
        type: boolean
      warnings:
        items:
          type: string
        type: array
    type: object
  api.batchGetExamplesRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  api.batchGetGrammarsRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  api.cleanupRequest:
    properties:
      max_age:
        description: Duration string like "720h" for 30 days
        type: string
    type: object
  api.completeExamAttemptRequest:
    properties:
      score:
        type: string
    required:
    - score
    type: object
  api.completeSessionRequest:
    properties:
      final_stats:
        $ref: '#/definitions/api.SessionStats'
    type: object
  api.createContentRequest:
    properties:
      description:
        type: string
      part_id:
        minimum: 1
        type: integer
      type:
        type: string
    required:
    - description
    - part_id
    - type
    type: object
  api.createExamAttemptRequest:
    properties:
      exam_id:
        minimum: 1
        type: integer
    required:
    - exam_id
    type: object
  api.createExamRequest:
    properties:
      is_unlocked:
        type: boolean
      time_limit_minutes:
        minimum: 1
        type: integer
      title:
        type: string
    required:
    - time_limit_minutes
    - title
    type: object
  api.createExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.createGrammarRequest:
    properties:
      contents:
        items:
          $ref: '#/definitions/api.GrammarContent'
        type: array
      grammar_key:
        type: string
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - grammar_key
    - level
    - related
    - tag
    - title
    type: object
  api.createLearningSessionRequest:
    properties:
      session_config:
        $ref: '#/definitions/api.SessionConfig'
      session_type:
        enum:
        - flashcard
        - match
        - quiz
        - type
        type: string
      study_set_id:
        type: integer
      word_limit:
        maximum: 50
        minimum: 1
        type: integer
    required:
    - session_type
    type: object
  api.createPartRequest:
    properties:
      exam_id:
        minimum: 1
        type: integer
      title:
        type: string
    required:
    - exam_id
    - title
    type: object
  api.createQuestionRequest:
    properties:
      content_id:
        minimum: 1
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        minItems: 1
        type: array
      title:
        type: string
      true_answer:
        type: string
    required:
    - content_id
    - explanation
    - possible_answers
    - title
    - true_answer
    type: object
  api.createSpeakingSessionRequest:
    properties:
      end_time:
        type: string
      session_topic:
        type: string
      start_time:
        type: string
      user_id:
        minimum: 1
        type: integer
    required:
    - user_id
    type: object
  api.createSpeakingTurnRequest:
    properties:
      ai_evaluation:
        type: object
      ai_score:
        type: number
      audio_recording_path:
        type: string
      session_id:
        minimum: 1
        type: integer
      speaker_type:
        type: string
      text_spoken:
        type: string
      timestamp:
        type: string
    required:
    - session_id
    - speaker_type
    type: object
  api.createStudySetRequest:
    properties:
      description:
        type: string
      is_public:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  api.createUserAnswerRequest:
    properties:
      attempt_id:
        minimum: 1
        type: integer
      question_id:
        minimum: 1
        type: integer
      selected_answer:
        type: string
    required:
    - attempt_id
    - question_id
    - selected_answer
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.createUserWordProgressRequest:
    properties:
      ease_factor:
        minimum: 0
        type: number
      interval_days:
        minimum: 0
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        minimum: 0
        type: integer
      word_id:
        type: integer
    required:
    - word_id
    type: object
  api.createUserWritingRequest:
    description: Request object for creating user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      prompt_id:
        type: integer
      submission_text:
        type: string
      user_id:
        minimum: 1
        type: integer
    required:
    - submission_text
    - user_id
    type: object
  api.createWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.ConjugationData'
      descript_level:
        type: string
      freq:
        type: number
      level:
        type: integer
      means:
        items:
          $ref: '#/definitions/api.MeaningData'
        type: array
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        items:
          $ref: '#/definitions/api.SynonymData'
        type: array
      word:
        type: string
    required:
    - descript_level
    - freq
    - level
    - pronounce
    - short_mean
    - word
    type: object
  api.createWritingPromptRequest:
    properties:
      difficulty_level:
        type: string
      prompt_text:
        type: string
      topic:
        type: string
      user_id:
        type: integer
    required:
    - prompt_text
    type: object
  api.enhancedBackupRequest:
    properties:
      description:
        type: string
      type:
        description: manual, automatic, migration, etc.
        type: string
    required:
    - description
    - type
    type: object
  api.enhancedBackupResponse:
    properties:
      checksum:
        type: string
      compressed:
        type: boolean
      download_url:
        type: string
      duration:
        type: string
      encrypted:
        type: boolean
      filename:
        type: string
      size:
        type: integer
      success:
        type: boolean
      validated:
        type: boolean
      warnings:
        items:
          type: string
        type: array
    type: object
  api.enhancedRestoreRequest:
    properties:
      filename:
        type: string
    required:
    - filename
    type: object
  api.enhancedRestoreResponse:
    properties:
      duration:
        type: string
      records_count:
        type: integer
      success:
        type: boolean
      tables_count:
        type: integer
      warnings:
        items:
          type: string
        type: array
    type: object
  api.loginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      security_config:
        $ref: '#/definitions/api.SecurityConfig'
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.logoutRequest:
    properties:
      refresh_token:
        type: string
    type: object
  api.notifyUpgradeRequest:
    properties:
      target_users:
        description: If empty, broadcasts to all
        items:
          type: string
        type: array
      version:
        type: string
    required:
    - version
    type: object
  api.refreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.refreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.registerUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.registerUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      security_config:
        $ref: '#/definitions/api.SecurityConfig'
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.restoreRequest:
    properties:
      filename:
        type: string
    required:
    - filename
    type: object
  api.scheduleInfo:
    properties:
      description:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      last_run:
        type: string
      next_run:
        type: string
      schedule:
        type: string
    type: object
  api.scoreWritingRequest:
    properties:
      submission_id:
        description: If provided, update this submission
        type: integer
      text:
        description: Text to score (required if no submission_id)
        type: string
    type: object
  api.scoreWritingResponse:
    properties:
      band:
        description: TOEIC band level
        type: string
      confidence:
        description: AI confidence score (0-1)
        type: number
      feedback:
        additionalProperties: true
        description: Detailed feedback
        type: object
      processed_at:
        type: string
      prompt_id:
        type: integer
      score:
        description: 0-200 TOEIC writing score
        type: integer
      suggestions:
        description: Improvement suggestions
        items:
          type: string
        type: array
      text:
        type: string
      user_id:
        type: integer
    type: object
  api.submitLearningAttemptRequest:
    properties:
      attempt_type:
        type: string
      difficulty_rating:
        maximum: 5
        minimum: 1
        type: integer
      response_time_ms:
        type: integer
      user_answer:
        type: string
      word_id:
        minimum: 1
        type: integer
    required:
    - attempt_type
    - word_id
    type: object
  api.subscriptionRequest:
    properties:
      client_version:
        type: string
      notify_major:
        type: boolean
      notify_minor:
        type: boolean
      notify_patches:
        type: boolean
      notify_required:
        type: boolean
      platform:
        type: string
    type: object
  api.updateContentRequest:
    properties:
      description:
        type: string
      part_id:
        minimum: 1
        type: integer
      type:
        type: string
    type: object
  api.updateExamAttemptRequest:
    properties:
      score:
        type: string
      status:
        type: string
    type: object
  api.updateExamRequest:
    properties:
      is_unlocked:
        type: boolean
      time_limit_minutes:
        minimum: 1
        type: integer
      title:
        type: string
    type: object
  api.updateExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.updateGrammarRequest:
    properties:
      contents:
        items:
          $ref: '#/definitions/api.GrammarContent'
        type: array
      grammar_key:
        type: string
      id:
        minimum: 1
        type: integer
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - id
    type: object
  api.updateMasteryRequest:
    properties:
      mastery_level:
        maximum: 10
        minimum: 1
        type: integer
    required:
    - mastery_level
    type: object
  api.updatePartRequest:
    properties:
      exam_id:
        minimum: 1
        type: integer
      title:
        type: string
    type: object
  api.updateQuestionRequest:
    properties:
      content_id:
        minimum: 1
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        minItems: 1
        type: array
      title:
        type: string
      true_answer:
        type: string
    type: object
  api.updateSpeakingSessionRequest:
    properties:
      end_time:
        type: string
      session_topic:
        type: string
      start_time:
        type: string
    type: object
  api.updateSpeakingTurnRequest:
    properties:
      ai_evaluation:
        type: object
      ai_score:
        type: number
      audio_recording_path:
        type: string
      text_spoken:
        type: string
      timestamp:
        type: string
    type: object
  api.updateStudySetRequest:
    properties:
      description:
        type: string
      is_public:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  api.updateUserAnswerRequest:
    properties:
      selected_answer:
        type: string
    required:
    - selected_answer
    type: object
  api.updateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  api.updateUserWordProgressRequest:
    properties:
      ease_factor:
        minimum: 0
        type: number
      interval_days:
        minimum: 0
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        minimum: 0
        type: integer
    type: object
  api.updateUserWritingRequest:
    description: Request object for updating user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      evaluated_at:
        type: string
      submission_text:
        type: string
    type: object
  api.updateWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.ConjugationData'
      descript_level:
        type: string
      freq:
        type: number
      id:
        minimum: 1
        type: integer
      level:
        type: integer
      means:
        items:
          $ref: '#/definitions/api.MeaningData'
        type: array
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        items:
          $ref: '#/definitions/api.SynonymData'
        type: array
      word:
        type: string
    required:
    - id
    type: object
  api.updateWritingPromptRequest:
    properties:
      difficulty_level:
        type: string
      prompt_text:
        type: string
      topic:
        type: string
    type: object
  api.upgradeCheckRequest:
    properties:
      current_version:
        type: string
      platform:
        type: string
      user_agent:
        type: string
    required:
    - current_version
    type: object
  db.ExamStatusEnum:
    enum:
    - in_progress
    - completed
    - abandoned
    type: string
    x-enum-varnames:
    - ExamStatusEnumInProgress
    - ExamStatusEnumCompleted
    - ExamStatusEnumAbandoned
  errors.ErrorCategory:
    enum:
    - CLIENT
    - SERVER
    - DATABASE
    - EXTERNAL
    - VALIDATION
    - AUTH
    - BUSINESS
    type: string
    x-enum-varnames:
    - CategoryClient
    - CategoryServer
    - CategoryDatabase
    - CategoryExternal
    - CategoryValidation
    - CategoryAuth
    - CategoryBusiness
  errors.ErrorCode:
    enum:
    - UNAUTHORIZED
    - FORBIDDEN
    - INVALID_CREDENTIALS
    - TOKEN_EXPIRED
    - TOKEN_INVALID
    - VALIDATION_FAILED
    - INVALID_INPUT
    - MISSING_FIELD
    - INVALID_FORMAT
    - NOT_FOUND
    - ALREADY_EXISTS
    - CONFLICT
    - DATABASE_ERROR
    - CONNECTION_FAILED
    - TRANSACTION_FAILED
    - CONSTRAINT_VIOLATION
    - EXTERNAL_SERVICE_ERROR
    - SERVICE_UNAVAILABLE
    - TIMEOUT
    - BUSINESS_LOGIC_ERROR
    - INSUFFICIENT_DATA
    - INVALID_OPERATION
    - INTERNAL_SERVER_ERROR
    - FILE_SYSTEM_ERROR
    - MEMORY_LIMIT_EXCEEDED
    - RATE_LIMITED
    type: string
    x-enum-varnames:
    - ErrCodeUnauthorized
    - ErrCodeForbidden
    - ErrCodeInvalidCredentials
    - ErrCodeTokenExpired
    - ErrCodeTokenInvalid
    - ErrCodeValidationFailed
    - ErrCodeInvalidInput
    - ErrCodeMissingField
    - ErrCodeInvalidFormat
    - ErrCodeNotFound
    - ErrCodeAlreadyExists
    - ErrCodeConflict
    - ErrCodeDatabaseError
    - ErrCodeConnectionFailed
    - ErrCodeTransactionFailed
    - ErrCodeConstraintViolation
    - ErrCodeExternalService
    - ErrCodeServiceUnavailable
    - ErrCodeTimeout
    - ErrCodeBusinessLogic
    - ErrCodeInsufficientData
    - ErrCodeInvalidOperation
    - ErrCodeInternalServer
    - ErrCodeFileSystem
    - ErrCodeMemoryLimit
    - ErrCodeRateLimited
  errors.ErrorSeverity:
    enum:
    - LOW
    - MEDIUM
    - HIGH
    - CRITICAL
    type: string
    x-enum-varnames:
    - SeverityLow
    - SeverityMedium
    - SeverityHigh
    - SeverityCritical
  errors.ErrorSummary:
    properties:
      category_counts:
        additionalProperties:
          type: integer
        type: object
      error_rate_per_minute:
        type: number
      http_status_counts:
        additionalProperties:
          type: integer
        type: object
      severity_counts:
        additionalProperties:
          type: integer
        type: object
      since_reset:
        example: 5m30s
        type: string
      top_errors:
        items:
          $ref: '#/definitions/errors.TopErrorStat'
        type: array
      total_errors:
        type: integer
    type: object
  errors.TopErrorStat:
    properties:
      category:
        $ref: '#/definitions/errors.ErrorCategory'
      code:
        $ref: '#/definitions/errors.ErrorCode'
      count:
        type: integer
      percentage:
        type: number
      severity:
        $ref: '#/definitions/errors.ErrorSeverity'
    type: object
  monitoring.Alert:
    properties:
      count:
        description: Number of times this alert fired
        type: integer
      details:
        additionalProperties: true
        type: object
      id:
        type: string
      last_fired:
        type: string
      level:
        $ref: '#/definitions/monitoring.AlertLevel'
      message:
        type: string
      name:
        type: string
      resolved:
        type: boolean
      resolved_at:
        type: string
      source:
        type: string
      timestamp:
        type: string
    type: object
  monitoring.AlertLevel:
    enum:
    - INFO
    - WARNING
    - CRITICAL
    type: string
    x-enum-varnames:
    - AlertLevelInfo
    - AlertLevelWarning
    - AlertLevelCritical
  performance.CacheStats:
    properties:
      buffer_cache_hit_ratio:
        type: number
      index_cache_hit_ratio:
        type: number
    type: object
  performance.DatabaseSizeStats:
    properties:
      index_ratio:
        type: number
      index_size:
        type: string
      table_size:
        type: string
      total_size:
        type: string
    type: object
  performance.IndexUsageStats:
    properties:
      index_name:
        type: string
      index_size:
        type: string
      scans:
        type: integer
      schema_name:
        type: string
      table_name:
        type: string
      tuples_fetch:
        type: integer
      tuples_read:
        type: integer
      usage_level:
        type: string
    type: object
  performance.OptimizationRecommendation:
    properties:
      column_names:
        type: string
      estimated_benefit:
        type: string
      rationale:
        type: string
      sql_command:
        type: string
      table_name:
        type: string
      type:
        type: string
    type: object
  performance.PerformanceMetrics:
    properties:
      cache_hit_ratio:
        $ref: '#/definitions/performance.CacheStats'
      database_size:
        $ref: '#/definitions/performance.DatabaseSizeStats'
      index_usage:
        items:
          $ref: '#/definitions/performance.IndexUsageStats'
        type: array
      query_performance:
        items:
          $ref: '#/definitions/performance.QueryPerformanceStats'
        type: array
      table_stats:
        items:
          $ref: '#/definitions/performance.TableStats'
        type: array
    type: object
  performance.QueryPerformanceStats:
    properties:
      calls:
        type: integer
      hit_percent:
        type: number
      mean_time:
        type: number
      query:
        type: string
      rows:
        type: integer
      total_time:
        type: number
    type: object
  performance.TableStats:
    properties:
      deletes:
        type: integer
      idx_tuples_fetch:
        type: integer
      index_scans:
        type: integer
      inserts:
        type: integer
      schema_name:
        type: string
      seq_scan_percentage:
        type: number
      seq_tuples_read:
        type: integer
      sequential_scans:
        type: integer
      table_name:
        type: string
      total_size:
        type: string
      updates:
        type: integer
    type: object
  upgrade.AppVersion:
    properties:
      changes:
        items:
          type: string
        type: array
      deprecated:
        description: versions that are deprecated
        items:
          type: string
        type: array
      description:
        type: string
      downloads:
        additionalProperties:
          type: string
        description: platform -> download URL
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      min_version:
        type: string
      release_date:
        type: string
      required:
        type: boolean
      title:
        type: string
      version:
        type: string
    type: object
  upgrade.UpdateCheckResponse:
    properties:
      has_update:
        type: boolean
      latest_version:
        $ref: '#/definitions/upgrade.AppVersion'
      message:
        type: string
      notifications:
        items:
          $ref: '#/definitions/websocket.UpgradeNotification'
        type: array
      update_required:
        type: boolean
    type: object
  websocket.UpgradeNotification:
    properties:
      changes:
        items:
          type: string
        type: array
      description:
        type: string
      release_date:
        type: string
      required:
        type: boolean
      title:
        type: string
      update_url:
        type: string
      version:
        type: string
    type: object
info:
  contact: {}
paths:
  /alerts:
    get:
      consumes:
      - application/json
      description: Get all currently active monitoring alerts
      produces:
      - application/json
      responses:
        "200":
          description: Active alerts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/monitoring.Alert'
                  type: array
              type: object
      summary: Get active alerts
      tags:
      - monitoring
  /alerts/history:
    get:
      consumes:
      - application/json
      description: Get recent alert history
      parameters:
      - default: 50
        description: Maximum number of alerts to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Alert history retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/monitoring.Alert'
                  type: array
              type: object
      summary: Get alert history
      tags:
      - monitoring
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.loginUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Login user
      tags:
      - auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user by invalidating their access and refresh tokens
      parameters:
      - description: Logout request with optional refresh token
        in: body
        name: logout
        schema:
          $ref: '#/definitions/api.logoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized if the user is not authenticated
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - auth
  /api/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/api.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.refreshTokenResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Refresh access token
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return authentication tokens
      parameters:
      - description: Registration information
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/api.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.registerUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Register a new user
      tags:
      - auth
  /api/v1/admin/backups:
    get:
      consumes:
      - application/json
      description: Lists all available database backups
      produces:
      - application/json
      responses:
        "200":
          description: Backups retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.backupListItem'
                  type: array
              type: object
        "500":
          description: Failed to retrieve backups
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List database backups
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Creates a backup of the PostgreSQL database
      parameters:
      - description: Backup details
        in: body
        name: backup
        required: true
        schema:
          $ref: '#/definitions/api.backupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Backup created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.backupResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create backup
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create database backup
      tags:
      - admin
  /api/v1/admin/backups/{filename}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific database backup file
      parameters:
      - description: Backup filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Backup deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid filename
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Backup file not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete backup file
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete database backup
      tags:
      - admin
  /api/v1/admin/backups/{filename}/validate:
    post:
      consumes:
      - application/json
      description: Validates the integrity and structure of a backup file
      parameters:
      - description: Backup filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Backup validation completed
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.backupValidationResponse'
              type: object
        "400":
          description: Invalid filename
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Backup file not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Validation failed
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Validate backup file
      tags:
      - admin
  /api/v1/admin/backups/cleanup:
    post:
      consumes:
      - application/json
      description: Manually trigger cleanup of old backup files
      parameters:
      - description: Cleanup parameters
        in: body
        name: cleanup
        schema:
          $ref: '#/definitions/api.cleanupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cleanup completed successfully
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to cleanup backups
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Manual cleanup of old backups
      tags:
      - admin
  /api/v1/admin/backups/download/{filename}:
    get:
      description: Downloads a specific database backup file
      parameters:
      - description: Backup filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Backup file content
          schema:
            type: file
        "400":
          description: Invalid filename
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Backup file not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to serve backup file
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Download database backup
      tags:
      - admin
  /api/v1/admin/backups/enhanced:
    post:
      consumes:
      - application/json
      description: Creates a backup with advanced features like compression, encryption,
        and validation
      parameters:
      - description: Enhanced backup details
        in: body
        name: backup
        required: true
        schema:
          $ref: '#/definitions/api.enhancedBackupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Backup created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.enhancedBackupResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create backup
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create enhanced database backup
      tags:
      - admin
  /api/v1/admin/backups/enhanced/restore:
    post:
      consumes:
      - application/json
      description: Restores database with advanced validation and safety measures
      parameters:
      - description: Enhanced restore details
        in: body
        name: restore
        required: true
        schema:
          $ref: '#/definitions/api.enhancedRestoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Database restored successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.enhancedRestoreResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Backup file not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to restore database
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Restore database from enhanced backup
      tags:
      - admin
  /api/v1/admin/backups/history:
    get:
      description: Get backup history and statistics
      parameters:
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Backup history retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.backupHistoryResponse'
              type: object
        "500":
          description: Failed to get backup history
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get backup history
      tags:
      - admin
  /api/v1/admin/backups/restore:
    post:
      consumes:
      - application/json
      description: Restores the database from a specified backup file
      parameters:
      - description: Restore details
        in: body
        name: restore
        required: true
        schema:
          $ref: '#/definitions/api.restoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Database restored successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Backup file not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to restore database
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Restore database from backup
      tags:
      - admin
  /api/v1/admin/backups/schedules:
    get:
      description: Get all active backup schedules
      produces:
      - application/json
      responses:
        "200":
          description: Backup schedules retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.scheduleInfo'
                  type: array
              type: object
        "500":
          description: Failed to get schedules
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get backup schedules
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Add a new backup schedule
      parameters:
      - description: Schedule details
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/api.addScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Schedule added successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to add schedule
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Add backup schedule
      tags:
      - admin
  /api/v1/admin/backups/schedules/{id}:
    delete:
      description: Remove a backup schedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schedule removed successfully
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to remove schedule
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove backup schedule
      tags:
      - admin
  /api/v1/admin/backups/status:
    get:
      consumes:
      - application/json
      description: Returns backup system status, recent activity, and health metrics
      produces:
      - application/json
      responses:
        "200":
          description: Backup status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.backupStatusResponse'
              type: object
        "500":
          description: Failed to retrieve backup status
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get backup status and health
      tags:
      - admin
  /api/v1/admin/backups/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a backup file to the server
      parameters:
      - description: Backup SQL file
        in: formData
        name: file
        required: true
        type: file
      - description: Backup description
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Backup uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.backupResponse'
              type: object
        "400":
          description: Invalid file or description
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to save backup file
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Upload database backup
      tags:
      - admin
  /api/v1/admin/cache/advanced-stats:
    get:
      consumes:
      - application/json
      description: Get comprehensive cache statistics including distributed cache,
        warming, and metrics
      produces:
      - application/json
      responses:
        "200":
          description: Advanced cache statistics
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get advanced cache statistics
      tags:
      - Admin
  /api/v1/admin/cache/clear:
    delete:
      consumes:
      - application/json
      description: Clear all cached data
      produces:
      - application/json
      responses:
        "200":
          description: Cache cleared successfully
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Clear all cache
      tags:
      - Admin
  /api/v1/admin/cache/clear/{pattern}:
    delete:
      consumes:
      - application/json
      description: Clear cached data matching a specific pattern
      parameters:
      - description: Cache key pattern to clear
        in: path
        name: pattern
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cache pattern cleared successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Clear cache by pattern
      tags:
      - Admin
  /api/v1/admin/cache/health:
    get:
      consumes:
      - application/json
      description: Get health status of all cache components
      produces:
      - application/json
      responses:
        "200":
          description: Cache health status
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get cache health status
      tags:
      - Admin
  /api/v1/admin/cache/invalidate/tag/{tag}:
    delete:
      consumes:
      - application/json
      description: Invalidate all cache entries associated with a specific tag
      parameters:
      - description: Tag to invalidate
        in: path
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cache invalidated successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Invalidate cache by tag
      tags:
      - Admin
  /api/v1/admin/cache/stats:
    get:
      consumes:
      - application/json
      description: Get cache statistics and information
      produces:
      - application/json
      responses:
        "200":
          description: Cache statistics
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get cache statistics
      tags:
      - Admin
  /api/v1/admin/cache/warm:
    post:
      consumes:
      - application/json
      description: Manually trigger cache warming for frequently accessed data
      produces:
      - application/json
      responses:
        "200":
          description: Cache warming initiated successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Cache warming not available
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Trigger manual cache warming
      tags:
      - Admin
  /api/v1/admin/check-permission:
    post:
      consumes:
      - application/json
      description: Check if a user has a specific permission (admin only)
      parameters:
      - description: Permission check information
        in: body
        name: check
        required: true
        schema:
          $ref: '#/definitions/api.CheckPermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permission check completed
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PermissionCheckResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Check user permission
      tags:
      - rbac
  /api/v1/admin/i18n/languages/{language}/export:
    get:
      consumes:
      - application/json
      description: Export all messages for a specific language as JSON
      parameters:
      - description: Language code (en, vi)
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Messages exported successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Invalid language
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Export messages (Admin only)
      tags:
      - i18n
  /api/v1/admin/i18n/languages/{language}/messages:
    post:
      consumes:
      - application/json
      description: Add or update a translation message for a specific language
      parameters:
      - description: Language code (en, vi)
        in: path
        name: language
        required: true
        type: string
      - description: Message details
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/api.MessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message updated successfully
          schema:
            $ref: '#/definitions/api.Response'
        "201":
          description: Message created successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Add or update a message (Admin only)
      tags:
      - i18n
  /api/v1/admin/i18n/languages/{language}/messages/batch:
    post:
      consumes:
      - application/json
      description: Add or update multiple translation messages for a specific language
      parameters:
      - description: Language code (en, vi)
        in: path
        name: language
        required: true
        type: string
      - description: Messages details
        in: body
        name: messages
        required: true
        schema:
          $ref: '#/definitions/api.MessagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Messages updated successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Add or update multiple messages (Admin only)
      tags:
      - i18n
  /api/v1/admin/metrics/errors/categories:
    get:
      consumes:
      - application/json
      description: Get error counts grouped by category (CLIENT, SERVER, DATABASE,
        etc.)
      produces:
      - application/json
      responses:
        "200":
          description: Category counts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error counts by category
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/counts:
    get:
      consumes:
      - application/json
      description: Get error counts grouped by error code
      produces:
      - application/json
      responses:
        "200":
          description: Error counts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error counts by code
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/rate:
    get:
      consumes:
      - application/json
      description: Get the current error rate per minute
      produces:
      - application/json
      responses:
        "200":
          description: Error rate retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error rate
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/reset:
    post:
      consumes:
      - application/json
      description: Reset all error metrics counters to zero
      produces:
      - application/json
      responses:
        "200":
          description: Error metrics reset successfully
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Reset error metrics
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/severity:
    get:
      consumes:
      - application/json
      description: Get error counts grouped by severity level (LOW, MEDIUM, HIGH,
        CRITICAL)
      produces:
      - application/json
      responses:
        "200":
          description: Severity counts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error counts by severity
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/status:
    get:
      consumes:
      - application/json
      description: Get error counts grouped by HTTP status code
      produces:
      - application/json
      responses:
        "200":
          description: HTTP status counts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error counts by HTTP status
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/summary:
    get:
      consumes:
      - application/json
      description: Get a comprehensive summary of error metrics including counts,
        rates, and top errors
      parameters:
      - default: 10
        description: Number of top errors to include
        in: query
        name: top_errors
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Error metrics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/errors.ErrorSummary'
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get error metrics summary
      tags:
      - monitoring
  /api/v1/admin/metrics/errors/top:
    get:
      consumes:
      - application/json
      description: Get the most frequently occurring errors
      parameters:
      - default: 10
        description: Number of top errors to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Top errors retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    type: object
                  type: array
              type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get top errors
      tags:
      - monitoring
  /api/v1/admin/performance/concurrency/reset:
    post:
      description: Resets all concurrency metrics and statistics (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Metrics reset successfully
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Reset concurrency metrics
      tags:
      - Performance
  /api/v1/admin/permissions:
    get:
      consumes:
      - application/json
      description: Get a list of all permissions in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Permissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.PermissionResponse'
                  type: array
              type: object
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List permissions
      tags:
      - rbac
  /api/v1/admin/roles:
    get:
      consumes:
      - application/json
      description: Get a list of all roles in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.RoleResponse'
                  type: array
              type: object
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List all roles
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: Create a new role in the system (admin only)
      parameters:
      - description: Role information
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/api.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.RoleResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new role
      tags:
      - rbac
  /api/v1/admin/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role from the system (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a role
      tags:
      - rbac
    get:
      consumes:
      - application/json
      description: Retrieve a role by its ID (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.RoleResponse'
              type: object
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get role by ID
      tags:
      - rbac
    put:
      consumes:
      - application/json
      description: Update an existing role (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated role information
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/api.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.RoleResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a role
      tags:
      - rbac
  /api/v1/admin/roles/{role_id}/permissions/{permission_id}:
    delete:
      consumes:
      - application/json
      description: Remove a permission from a role (admin only)
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Permission ID
        in: path
        name: permission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permission removed successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove permission from role
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: Assign a permission to a role (admin only)
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Permission ID
        in: path
        name: permission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permission assigned successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Assign permission to role
      tags:
      - rbac
  /api/v1/admin/roles/users/{roleName}:
    get:
      consumes:
      - application/json
      description: Retrieve all users assigned to a specific role (admin only)
      parameters:
      - description: Role name
        in: path
        name: roleName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserRoleAssignmentResponse'
                  type: array
              type: object
        "400":
          description: Invalid role name
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get users by role
      tags:
      - rbac
  /api/v1/admin/user-roles:
    post:
      consumes:
      - application/json
      description: Assign a role to a user (admin only)
      parameters:
      - description: Role assignment information
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/api.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User or role not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Assign role to user
      tags:
      - rbac
  /api/v1/admin/users/{user_id}/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Remove a role from a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role removed successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid user or role ID
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove role from user
      tags:
      - rbac
  /api/v1/analyze/cache:
    get:
      consumes:
      - application/json
      description: Get cached word analysis result by user and text
      parameters:
      - description: Text to search for
        in: query
        name: text
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cached analysis found
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.analyzeTextResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Analysis not found in cache
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get word analysis by ID
      tags:
      - text-analysis
  /api/v1/analyze/cache/clear:
    post:
      consumes:
      - application/json
      description: Clear the analyze service cache (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Cache cleared successfully
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Clear analyze service cache
      tags:
      - text-analysis
  /api/v1/analyze/health:
    get:
      consumes:
      - application/json
      description: Check the health status of the analyze service
      produces:
      - application/json
      responses:
        "200":
          description: Service health status
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get analyze service health
      tags:
      - text-analysis
  /api/v1/analyze/stats:
    get:
      consumes:
      - application/json
      description: Get detailed statistics about the analyze service
      produces:
      - application/json
      responses:
        "200":
          description: Service statistics
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get analyze service statistics
      tags:
      - text-analysis
  /api/v1/analyze/text:
    post:
      consumes:
      - application/json
      description: Analyze English text to get word levels and synonym suggestions
      parameters:
      - description: Text analysis request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.analyzeTextRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Text analyzed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.analyzeTextResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
        "503":
          description: Analyze service unavailable
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Analyze text
      tags:
      - text-analysis
  /api/v1/analyze/texts:
    post:
      consumes:
      - application/json
      description: Analyze multiple English texts concurrently to get word levels
        and synonym suggestions
      parameters:
      - description: Multiple texts analysis request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.analyzeMultipleTextsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Texts analyzed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.analyzeTextResponse'
                  type: array
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
        "503":
          description: Analyze service unavailable
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Analyze multiple texts
      tags:
      - text-analysis
  /api/v1/content-questions/{content_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all questions for a specific content
      parameters:
      - description: Content ID
        in: path
        name: content_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.QuestionResponse'
                  type: array
              type: object
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve questions
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List questions by content
      tags:
      - questions
  /api/v1/contents:
    post:
      consumes:
      - application/json
      description: Add new content to a part
      parameters:
      - description: Content object to create
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/api.createContentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Content created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new content
      tags:
      - contents
  /api/v1/contents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete specific content by its ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Content deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete content
      tags:
      - contents
    get:
      consumes:
      - application/json
      description: Retrieve specific content by its ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Content retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get content by ID
      tags:
      - contents
    put:
      consumes:
      - application/json
      description: Update existing content by ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content fields to update
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/api.updateContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Content updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid request body or content ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update content
      tags:
      - contents
  /api/v1/exam-attempts:
    get:
      consumes:
      - application/json
      description: Get a list of exam attempts for the authenticated user
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExamAttemptResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exam attempts
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List user's exam attempts
      tags:
      - exam-attempts
    post:
      consumes:
      - application/json
      description: Create a new exam attempt for the authenticated user
      parameters:
      - description: Exam attempt to create
        in: body
        name: attempt
        required: true
        schema:
          $ref: '#/definitions/api.createExamAttemptRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exam attempt started successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "409":
          description: User already has an active attempt for this exam
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Start a new exam attempt
      tags:
      - exam-attempts
  /api/v1/exam-attempts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exam attempt (admin only or own incomplete attempts)
      parameters:
      - description: Exam Attempt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempt deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid attempt ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an exam attempt
      tags:
      - exam-attempts
    get:
      consumes:
      - application/json
      description: Retrieve a specific exam attempt by its ID (user can only access
        their own attempts)
      parameters:
      - description: Exam Attempt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempt retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptResponse'
              type: object
        "400":
          description: Invalid attempt ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Access denied - not your exam attempt
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get an exam attempt by ID
      tags:
      - exam-attempts
    put:
      consumes:
      - application/json
      description: Update the status or score of an exam attempt
      parameters:
      - description: Exam Attempt ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/api.updateExamAttemptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempt updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Access denied - not your exam attempt
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update exam attempt status
      tags:
      - exam-attempts
  /api/v1/exam-attempts/{id}/abandon:
    post:
      consumes:
      - application/json
      description: Abandon an active exam attempt
      parameters:
      - description: Exam Attempt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempt abandoned successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptResponse'
              type: object
        "400":
          description: Invalid attempt ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to abandon exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Abandon exam attempt
      tags:
      - exam-attempts
  /api/v1/exam-attempts/{id}/answers:
    get:
      consumes:
      - application/json
      description: Get all answers for a specific exam attempt
      parameters:
      - description: Attempt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Answers retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.AttemptAnswersResponse'
              type: object
        "400":
          description: Invalid attempt ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve answers
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get answers by attempt
      tags:
      - user-answers
  /api/v1/exam-attempts/{id}/complete:
    post:
      consumes:
      - application/json
      description: Complete an exam attempt with final score
      parameters:
      - description: Exam Attempt ID
        in: path
        name: id
        required: true
        type: integer
      - description: Complete exam attempt request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.completeExamAttemptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam attempt completed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to complete exam attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Complete exam attempt
      tags:
      - exam-attempts
  /api/v1/exam-attempts/{id}/score:
    get:
      consumes:
      - application/json
      description: Get scoring information for an exam attempt
      parameters:
      - description: Attempt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Score retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.AttemptScoreResponse'
              type: object
        "400":
          description: Invalid attempt ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve score
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get attempt score
      tags:
      - user-answers
  /api/v1/exam-attempts/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about user's exam attempts
      produces:
      - application/json
      responses:
        "200":
          description: Statistics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamAttemptStatsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve statistics
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get exam attempt statistics
      tags:
      - exam-attempts
  /api/v1/exam-parts/{exam_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all parts for a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: exam_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Parts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.PartResponse'
                  type: array
              type: object
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve parts
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List parts by exam
      tags:
      - parts
  /api/v1/examples:
    get:
      description: Get a list of all examples
      produces:
      - application/json
      responses:
        "200":
          description: Examples retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExampleResponse'
                  type: array
              type: object
        "500":
          description: Failed to retrieve examples
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List examples
      tags:
      - examples
    post:
      consumes:
      - application/json
      description: Create a new example
      parameters:
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createExampleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Example created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create example
      tags:
      - examples
  /api/v1/examples/{id}:
    delete:
      description: Delete an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Example deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete example
      tags:
      - examples
    get:
      description: Get details of an example by its ID
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Example retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get example by ID
      tags:
      - examples
    put:
      consumes:
      - application/json
      description: Update an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body or example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update example
      tags:
      - examples
  /api/v1/examples/batch:
    post:
      consumes:
      - application/json
      description: Get multiple examples by their IDs in a single request
      parameters:
      - description: List of example IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.batchGetExamplesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Examples retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExampleResponse'
                  type: array
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve examples
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Batch get examples by IDs
      tags:
      - examples
  /api/v1/exams:
    get:
      consumes:
      - application/json
      description: Get a list of all exams with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exams retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExamResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exams
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List exams
      tags:
      - exams
    post:
      consumes:
      - application/json
      description: Add a new exam to the database
      parameters:
      - description: Exam object to create
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/api.createExamRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exam created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new exam
      tags:
      - exams
  /api/v1/exams/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific exam by its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an exam
      tags:
      - exams
    get:
      consumes:
      - application/json
      description: Retrieve a specific exam entry by its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get an exam by ID
      tags:
      - exams
    put:
      consumes:
      - application/json
      description: Update an existing exam by ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exam fields to update
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/api.updateExamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid request body or exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an exam
      tags:
      - exams
  /api/v1/exams/{id}/leaderboard:
    get:
      consumes:
      - application/json
      description: Get the leaderboard for a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Leaderboard retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.LeaderboardEntry'
                  type: array
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve leaderboard
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get exam leaderboard
      tags:
      - exam-attempts
  /api/v1/exams/{id}/questions:
    get:
      consumes:
      - application/json
      description: Retrieves all questions for an exam organized by parts and contents
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamQuestionsResponse'
              type: object
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve questions
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all questions for an exam
      tags:
      - exams
  /api/v1/grammars:
    get:
      consumes:
      - application/json
      description: Get a list of grammars with pagination.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List grammars
      tags:
      - grammars
    post:
      consumes:
      - application/json
      description: Add a new grammar to the database.
      parameters:
      - description: Grammar object to create
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.createGrammarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Grammar created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new grammar
      tags:
      - grammars
  /api/v1/grammars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a grammar
      tags:
      - grammars
    get:
      consumes:
      - application/json
      description: Retrieve a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a grammar by ID
      tags:
      - grammars
    put:
      consumes:
      - application/json
      description: Update an existing grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      - description: Grammar object with fields to update
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.updateGrammarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Grammar updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body or grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a grammar
      tags:
      - grammars
  /api/v1/grammars/batch:
    post:
      consumes:
      - application/json
      description: Get multiple grammars by their IDs in a single request
      parameters:
      - description: List of grammar IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.batchGetGrammarsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Batch get grammars by IDs
      tags:
      - grammars
  /api/v1/grammars/level:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by level, with pagination.
      parameters:
      - description: Level to filter by
        in: query
        name: level
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by level
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List grammars by level
      tags:
      - grammars
  /api/v1/grammars/random:
    get:
      consumes:
      - application/json
      description: Retrieve a single random grammar entry from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Random grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "500":
          description: Failed to retrieve random grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a random grammar
      tags:
      - grammars
  /api/v1/grammars/search:
    get:
      consumes:
      - application/json
      description: Search grammars by title, key, or tag, with pagination.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to search grammars
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Search grammars
      tags:
      - grammars
  /api/v1/grammars/tag:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by a specific tag, with pagination.
      parameters:
      - description: Tag to filter by
        in: query
        name: tag
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by tag
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List grammars by tag
      tags:
      - grammars
  /api/v1/i18n/current:
    get:
      consumes:
      - application/json
      description: Get the current language being used for the request
      produces:
      - application/json
      responses:
        "200":
          description: Current language retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LanguageResponse'
              type: object
      summary: Get current language
      tags:
      - i18n
  /api/v1/i18n/languages:
    get:
      consumes:
      - application/json
      description: Get list of all supported languages with their information
      produces:
      - application/json
      responses:
        "200":
          description: Languages retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.I18nStatsResponse'
              type: object
      summary: Get supported languages
      tags:
      - i18n
  /api/v1/i18n/stats:
    get:
      consumes:
      - application/json
      description: Get detailed statistics about the i18n system
      produces:
      - application/json
      responses:
        "200":
          description: I18n statistics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
      summary: Get i18n statistics
      tags:
      - i18n
  /api/v1/i18n/translate:
    get:
      consumes:
      - application/json
      description: Test translation of a message key with the current language
      parameters:
      - description: Message key to translate
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message translated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
      summary: Test message translation
      tags:
      - i18n
  /api/v1/learning/sessions:
    post:
      consumes:
      - application/json
      description: Start a new vocabulary learning session
      parameters:
      - description: Session configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createLearningSessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Learning session started successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LearningSessionResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to start learning session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Start a new learning session
      tags:
      - learning
  /api/v1/learning/sessions/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a learning session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Learning session retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LearningSessionResponse'
              type: object
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve learning session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get learning session
      tags:
      - learning
  /api/v1/learning/sessions/{id}/attempts:
    post:
      consumes:
      - application/json
      description: Submit an answer for a word in a learning session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Learning attempt details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.submitLearningAttemptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Learning attempt submitted successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LearningAttemptResponse'
              type: object
        "400":
          description: Invalid request body or session ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to submit learning attempt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Submit learning attempt
      tags:
      - learning
  /api/v1/learning/sessions/{id}/complete:
    post:
      consumes:
      - application/json
      description: Mark a learning session as completed
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Session completion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.completeSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Learning session completed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LearningSessionResponse'
              type: object
        "400":
          description: Invalid request body or session ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to complete learning session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Complete learning session
      tags:
      - learning
  /api/v1/part-contents/{part_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all contents for a specific part
      parameters:
      - description: Part ID
        in: path
        name: part_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Contents retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ContentResponse'
                  type: array
              type: object
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve contents
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List contents by part
      tags:
      - contents
  /api/v1/parts:
    post:
      consumes:
      - application/json
      description: Add a new part to an exam
      parameters:
      - description: Part object to create
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/api.createPartRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Part created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new part
      tags:
      - parts
  /api/v1/parts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific part by its ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Part deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a part
      tags:
      - parts
    get:
      consumes:
      - application/json
      description: Retrieve a specific part by its ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Part retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Part not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a part by ID
      tags:
      - parts
    put:
      consumes:
      - application/json
      description: Update an existing part by ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      - description: Part fields to update
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/api.updatePartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Part updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid request body or part ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Part not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a part
      tags:
      - parts
  /api/v1/performance/cache:
    get:
      description: Retrieves cache hit ratio statistics for buffer and index caches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/performance.CacheStats'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get cache hit ratio
      tags:
      - performance
  /api/v1/performance/concurrency:
    get:
      description: Returns detailed concurrency metrics including active operations,
        worker pool status, and performance statistics
      produces:
      - application/json
      responses:
        "200":
          description: Concurrency metrics retrieved successfully
          schema:
            properties:
              concurrency_metrics:
                type: object
              connection_pool_stats:
                type: object
              request_handler_stats:
                type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get concurrency metrics
      tags:
      - Performance
  /api/v1/performance/concurrency/health:
    get:
      description: Returns health status of concurrency management components
      produces:
      - application/json
      responses:
        "200":
          description: Health status retrieved successfully
          schema:
            properties:
              components:
                type: object
              overall_health:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get concurrency health status
      tags:
      - Performance
  /api/v1/performance/dashboard:
    get:
      description: Provides a comprehensive performance dashboard with key metrics
        and alerts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get performance dashboard
      tags:
      - performance
  /api/v1/performance/indexes:
    get:
      description: Retrieves detailed index usage statistics for performance analysis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/performance.IndexUsageStats'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get index usage statistics
      tags:
      - performance
  /api/v1/performance/metrics:
    get:
      description: Retrieves comprehensive database performance metrics including
        index usage, table stats, and cache hit ratios
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/performance.PerformanceMetrics'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get database performance metrics
      tags:
      - performance
  /api/v1/performance/optimize:
    post:
      description: Executes automated database optimization procedures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Run database optimization
      tags:
      - performance
  /api/v1/performance/recommendations:
    get:
      description: Retrieves automated recommendations for database optimization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/performance.OptimizationRecommendation'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get optimization recommendations
      tags:
      - performance
  /api/v1/performance/search-test:
    get:
      consumes:
      - application/json
      description: Test search performance with timing information
      parameters:
      - description: Search query to test
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search performance results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Search failed
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get search performance test
      tags:
      - Performance
  /api/v1/performance/stats:
    get:
      consumes:
      - application/json
      description: Get comprehensive performance metrics for the application
      produces:
      - application/json
      responses:
        "200":
          description: Performance statistics
          schema:
            $ref: '#/definitions/api.PerformanceStats'
        "500":
          description: Failed to get performance stats
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get performance statistics
      tags:
      - Performance
  /api/v1/performance/tables:
    get:
      description: Retrieves detailed table statistics including sequential scans
        and size information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/performance.TableStats'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get table statistics
      tags:
      - performance
  /api/v1/questions:
    post:
      consumes:
      - application/json
      description: Add a new question to content
      parameters:
      - description: Question object to create
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/api.createQuestionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Question created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new question
      tags:
      - questions
  /api/v1/questions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Question deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid question ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a question
      tags:
      - questions
    get:
      consumes:
      - application/json
      description: Retrieve a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Question retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid question ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a question by ID
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update an existing question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      - description: Question fields to update
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/api.updateQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Question updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid request body or question ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a question
      tags:
      - questions
  /api/v1/speaking/sessions:
    post:
      consumes:
      - application/json
      description: Add a new speaking session to the database
      parameters:
      - description: Speaking session object to create
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/api.createSpeakingSessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Speaking session created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingSessionResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create speaking session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new speaking session
      tags:
      - speaking
  /api/v1/speaking/sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific speaking session by its ID
      parameters:
      - description: Speaking Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking session deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete speaking session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a speaking session
      tags:
      - speaking
    get:
      consumes:
      - application/json
      description: Retrieve a specific speaking session by its ID
      parameters:
      - description: Speaking Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking session retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingSessionResponse'
              type: object
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Speaking session not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve speaking session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a speaking session by ID
      tags:
      - speaking
    put:
      consumes:
      - application/json
      description: Update an existing speaking session by ID
      parameters:
      - description: Speaking Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Speaking session fields to update
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/api.updateSpeakingSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Speaking session updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingSessionResponse'
              type: object
        "400":
          description: Invalid request body or session ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Speaking session not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update speaking session
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a speaking session
      tags:
      - speaking
  /api/v1/speaking/sessions/{id}/turns:
    get:
      consumes:
      - application/json
      description: Get a list of all speaking turns for a specific session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking turns retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.SpeakingTurnResponse'
                  type: array
              type: object
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve speaking turns
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List speaking turns by session ID
      tags:
      - speaking
  /api/v1/speaking/turns:
    post:
      consumes:
      - application/json
      description: Add a new speaking turn to a session
      parameters:
      - description: Speaking turn object to create
        in: body
        name: turn
        required: true
        schema:
          $ref: '#/definitions/api.createSpeakingTurnRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Speaking turn created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingTurnResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create speaking turn
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new speaking turn
      tags:
      - speaking
  /api/v1/speaking/turns/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific speaking turn by its ID
      parameters:
      - description: Speaking Turn ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking turn deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid turn ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete speaking turn
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a speaking turn
      tags:
      - speaking
    get:
      consumes:
      - application/json
      description: Retrieve a specific speaking turn by its ID
      parameters:
      - description: Speaking Turn ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking turn retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingTurnResponse'
              type: object
        "400":
          description: Invalid turn ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Speaking turn not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve speaking turn
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a speaking turn by ID
      tags:
      - speaking
    put:
      consumes:
      - application/json
      description: Update an existing speaking turn by ID
      parameters:
      - description: Speaking Turn ID
        in: path
        name: id
        required: true
        type: integer
      - description: Speaking turn fields to update
        in: body
        name: turn
        required: true
        schema:
          $ref: '#/definitions/api.updateSpeakingTurnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Speaking turn updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.SpeakingTurnResponse'
              type: object
        "400":
          description: Invalid request body or turn ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Speaking turn not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update speaking turn
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a speaking turn
      tags:
      - speaking
  /api/v1/speaking/users/{user_id}/sessions:
    get:
      consumes:
      - application/json
      description: Get a list of all speaking sessions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Speaking sessions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.SpeakingSessionResponse'
                  type: array
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve speaking sessions
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List speaking sessions by user ID
      tags:
      - speaking
  /api/v1/study-sets:
    get:
      consumes:
      - application/json
      description: List study sets created by the current user
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Study sets retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.StudySetResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve study sets
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List user's study sets
      tags:
      - study-sets
    post:
      consumes:
      - application/json
      description: Create a new study set for vocabulary learning
      parameters:
      - description: Study set details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createStudySetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Study set created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.StudySetResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new study set
      tags:
      - study-sets
  /api/v1/study-sets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing study set
      parameters:
      - description: Study Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Study set deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid study set ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Study set not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a study set
      tags:
      - study-sets
    get:
      consumes:
      - application/json
      description: Get a study set by ID with its words
      parameters:
      - description: Study Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Study set retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.StudySetWithWordsResponse'
              type: object
        "400":
          description: Invalid study set ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Study set not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a study set
      tags:
      - study-sets
    put:
      consumes:
      - application/json
      description: Update an existing study set
      parameters:
      - description: Study Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Study set details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateStudySetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Study set updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.StudySetResponse'
              type: object
        "400":
          description: Invalid request body or study set ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Study set not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a study set
      tags:
      - study-sets
  /api/v1/study-sets/{id}/words:
    post:
      consumes:
      - application/json
      description: Add a word to an existing study set
      parameters:
      - description: Study Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Word to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.addWordToStudySetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Word added to study set successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request body or study set ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Study set not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to add word to study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Add word to study set
      tags:
      - study-sets
  /api/v1/study-sets/{id}/words/{word_id}:
    delete:
      consumes:
      - application/json
      description: Remove a word from an existing study set
      parameters:
      - description: Study Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word removed from study set successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid study set ID or word ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Study set not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to remove word from study set
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove word from study set
      tags:
      - study-sets
  /api/v1/study-sets/public:
    get:
      consumes:
      - application/json
      description: List publicly available study sets
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Public study sets retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.StudySetResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve public study sets
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List public study sets
      tags:
      - study-sets
  /api/v1/upgrade/check:
    post:
      consumes:
      - application/json
      description: Check if there are any updates available for the current app version
      parameters:
      - description: Current version information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.upgradeCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update check completed
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/upgrade.UpdateCheckResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Check for app updates
      tags:
      - upgrade
  /api/v1/upgrade/current:
    get:
      description: Get the current latest version of the application
      produces:
      - application/json
      responses:
        "200":
          description: Current version retrieved
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/upgrade.AppVersion'
              type: object
      summary: Get current app version
      tags:
      - upgrade
  /api/v1/upgrade/notify:
    post:
      consumes:
      - application/json
      description: Send upgrade notification to users
      parameters:
      - description: Notification information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.notifyUpgradeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Notification sent successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Version not found
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Send upgrade notification (Admin only)
      tags:
      - upgrade
  /api/v1/upgrade/stats:
    get:
      description: Get statistics about the upgrade service (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Upgrade statistics retrieved
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get upgrade service statistics
      tags:
      - upgrade
  /api/v1/upgrade/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to real-time upgrade notifications with preferences
      parameters:
      - description: Subscription preferences
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.subscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Subscribed to upgrade notifications
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Subscribe to upgrade notifications
      tags:
      - upgrade
  /api/v1/upgrade/unsubscribe:
    post:
      description: Unsubscribe from real-time upgrade notifications
      produces:
      - application/json
      responses:
        "200":
          description: Unsubscribed from upgrade notifications
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Unsubscribe from upgrade notifications
      tags:
      - upgrade
  /api/v1/upgrade/versions:
    get:
      description: Get all available versions of the application
      produces:
      - application/json
      responses:
        "200":
          description: All versions retrieved
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties:
                    $ref: '#/definitions/upgrade.AppVersion'
                  type: object
              type: object
      summary: Get all app versions
      tags:
      - upgrade
    post:
      consumes:
      - application/json
      description: Add a new version to the system and optionally notify users
      parameters:
      - description: Version information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.addVersionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Version added successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/upgrade.AppVersion'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Add new app version (Admin only)
      tags:
      - upgrade
  /api/v1/upgrade/versions/{version}:
    get:
      description: Get details of a specific version
      parameters:
      - description: Version number (e.g., 1.0.0)
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Version details retrieved
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/upgrade.AppVersion'
              type: object
        "404":
          description: Version not found
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get specific app version
      tags:
      - upgrade
  /api/v1/upgrade/ws:
    get:
      consumes:
      - application/json
      description: Upgrade HTTP connection to WebSocket for real-time upgrade notifications
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: WebSocket upgrade for real-time notifications
      tags:
      - upgrade
  /api/v1/upgrade/ws/status:
    get:
      description: Get the current WebSocket connection statistics
      produces:
      - application/json
      responses:
        "200":
          description: WebSocket status retrieved
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
      summary: Get WebSocket connection status
      tags:
      - upgrade
  /api/v1/user-answers:
    post:
      consumes:
      - application/json
      description: Submit an answer for a question in an exam attempt
      parameters:
      - description: User answer to submit
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/api.createUserAnswerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Answer submitted successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserAnswerResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Attempt or question not found
          schema:
            $ref: '#/definitions/api.Response'
        "409":
          description: Answer already exists for this question
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to submit answer
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Submit a user answer
      tags:
      - user-answers
  /api/v1/user-answers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user's answer (admin only or own incomplete attempts)
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Answer deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid answer ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Answer not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete answer
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user answer
      tags:
      - user-answers
    get:
      consumes:
      - application/json
      description: Retrieve a specific user answer by its ID
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User answer retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserAnswerResponse'
              type: object
        "400":
          description: Invalid answer ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User answer not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user answer
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a user answer by ID
      tags:
      - user-answers
    put:
      consumes:
      - application/json
      description: Update a user's answer for a question
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated answer data
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/api.updateUserAnswerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Answer updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserAnswerResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Answer not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update answer
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user answer
      tags:
      - user-answers
  /api/v1/user-answers/bulk:
    post:
      consumes:
      - application/json
      description: Submit multiple answers for an exam attempt
      parameters:
      - description: Bulk user answers to submit
        in: body
        name: answers
        required: true
        schema:
          $ref: '#/definitions/api.BulkUserAnswerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Answers submitted successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.BulkUserAnswerResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Attempt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to submit answers
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Submit user answers in bulk
      tags:
      - user-answers
  /api/v1/user-word-progress:
    post:
      consumes:
      - application/json
      description: Create a new user word progress record
      parameters:
      - description: User word progress data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createUserWordProgressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User word progress created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create user word progress
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create user word progress
      tags:
      - user-word-progress
  /api/v1/user-word-progress/{word_id}:
    delete:
      consumes:
      - application/json
      description: Delete a word progress record for the current user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User word progress deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete user word progress
      tags:
      - user-word-progress
    get:
      consumes:
      - application/json
      description: Get a specific word progress record for the current user. Returns
        null if no progress record exists.
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User word progress retrieved successfully (may be null if not
            found)
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user word progress
      tags:
      - user-word-progress
    put:
      consumes:
      - application/json
      description: Update a word progress record for the current user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      - description: User word progress data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateUserWordProgressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User word progress updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid request parameters or word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User word progress not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update user word progress
      tags:
      - user-word-progress
  /api/v1/user-word-progress/reviews:
    get:
      consumes:
      - application/json
      description: Get a list of words that are due for review for the current user
      parameters:
      - description: Maximum number of words to return (optional)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Words for review retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordWithProgressResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get words for review
      tags:
      - user-word-progress
  /api/v1/user-word-progress/saved:
    get:
      consumes:
      - application/json
      description: Get a list of all words saved by the current user
      parameters:
      - description: Maximum number of words to return (optional)
        in: query
        name: limit
        type: integer
      - description: Number of words to skip (optional)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Saved words retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordProgressResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all saved words
      tags:
      - user-word-progress
  /api/v1/user-word-progress/word/{word_id}:
    get:
      consumes:
      - application/json
      description: Get a specific word with its progress information for the current
        user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word with progress retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordWithProgressResponse'
              type: object
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get word with progress
      tags:
      - user-word-progress
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination. Allows for browsing through
        users.
      parameters:
      - default: 10
        description: Number of users to return per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user listing
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system. This endpoint is typically used
        for user registration.
      parameters:
      - description: User information for registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or validation failure
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user creation
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID.
      parameters:
      - description: User ID of the user to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user deletion
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user's details by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user retrieval
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information by their ID.
      parameters:
      - description: User ID of the user to update
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update. Only provided fields are updated.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user update
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /api/v1/users/{user_id}/permissions:
    get:
      consumes:
      - application/json
      description: Get all permissions granted to a user through their roles
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User permissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.PermissionResponse'
                  type: array
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user permissions
      tags:
      - rbac
  /api/v1/users/{user_id}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles assigned to a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.RoleResponse'
                  type: array
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user roles
      tags:
      - rbac
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "401":
          description: Unauthorized if the user is not authenticated
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error when retrieving user profile
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
  /api/v1/vocabulary/mastery-distribution:
    get:
      consumes:
      - application/json
      description: Get distribution of words across different mastery levels
      produces:
      - application/json
      responses:
        "200":
          description: Mastery distribution retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.MasteryDistribution'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve mastery distribution
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get mastery level distribution
      tags:
      - vocabulary-stats
  /api/v1/vocabulary/progress:
    get:
      consumes:
      - application/json
      description: Get overall vocabulary learning progress for the current user
      produces:
      - application/json
      responses:
        "200":
          description: Learning progress retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.LearningProgressResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve learning progress
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get overall learning progress
      tags:
      - vocabulary-stats
  /api/v1/vocabulary/review:
    get:
      consumes:
      - application/json
      description: Get words that need review based on mastery level
      parameters:
      - default: 5
        description: Mastery threshold
        in: query
        name: mastery_threshold
        type: integer
      - default: 20
        description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Words for review retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordForReviewResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve words for review
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get words needing review
      tags:
      - vocabulary-stats
  /api/v1/vocabulary/stats:
    get:
      consumes:
      - application/json
      description: Get vocabulary learning statistics for the current user
      parameters:
      - default: 20
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vocabulary statistics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.VocabularyStatsResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve vocabulary statistics
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get vocabulary statistics for current user
      tags:
      - vocabulary-stats
  /api/v1/vocabulary/words/{word_id}/mastery:
    put:
      consumes:
      - application/json
      description: Update the mastery level for a specific word
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      - description: Mastery level update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateMasteryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Word mastery updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.VocabularyStatsResponse'
              type: object
        "400":
          description: Invalid request body or word ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update word mastery
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update word mastery level
      tags:
      - vocabulary-stats
  /api/v1/words:
    get:
      consumes:
      - application/json
      description: List words with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of words
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to list words
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List words
      tags:
      - words
    post:
      consumes:
      - application/json
      description: Create a new word with the input payload
      parameters:
      - description: Create Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.createWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Word created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new word
      tags:
      - words
  /api/v1/words/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a word
      tags:
      - words
    get:
      consumes:
      - application/json
      description: Get a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to get word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a word by ID
      tags:
      - words
    put:
      consumes:
      - application/json
      description: Update a word with the input payload
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.updateWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a word
      tags:
      - words
  /api/v1/words/search:
    get:
      consumes:
      - application/json
      description: Search words by query string
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to search words
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Search words
      tags:
      - words
  /api/v1/writing/prompt-submissions/{prompt_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all writing submissions for a specific prompt
      parameters:
      - description: Prompt ID
        in: path
        name: prompt_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserWritingResponse'
                  type: array
              type: object
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submissions
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List user writing submissions by prompt ID
      tags:
      - writing
  /api/v1/writing/prompts:
    get:
      consumes:
      - application/json
      description: Get a list of all writing prompts
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WritingPromptResponse'
                  type: array
              type: object
        "500":
          description: Failed to retrieve writing prompts
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List all writing prompts
      tags:
      - writing
    post:
      consumes:
      - application/json
      description: Add a new writing prompt to the database
      parameters:
      - description: Writing prompt object to create
        in: body
        name: prompt
        required: true
        schema:
          $ref: '#/definitions/api.createWritingPromptRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Writing prompt created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new writing prompt
      tags:
      - writing
  /api/v1/writing/prompts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific writing prompt by its ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a writing prompt
      tags:
      - writing
    get:
      consumes:
      - application/json
      description: Retrieve a specific writing prompt by its ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Writing prompt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a writing prompt by ID
      tags:
      - writing
    put:
      consumes:
      - application/json
      description: Update an existing writing prompt by ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      - description: Writing prompt fields to update
        in: body
        name: prompt
        required: true
        schema:
          $ref: '#/definitions/api.updateWritingPromptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid request body or prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Writing prompt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a writing prompt
      tags:
      - writing
  /api/v1/writing/score:
    post:
      consumes:
      - application/json
      description: Score a writing submission using AI to get TOEIC band assessment
        and detailed feedback. If submission_id is provided, the submission will be
        updated with AI scores.
      parameters:
      - description: Writing scoring request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.scoreWritingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Writing scored successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.scoreWritingResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
        "503":
          description: AI scoring service unavailable
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Score writing submission using AI
      tags:
      - writing
  /api/v1/writing/submissions:
    post:
      consumes:
      - application/json
      description: Add a new user writing submission to the database
      parameters:
      - description: User writing submission object to create
        in: body
        name: writing
        required: true
        schema:
          $ref: '#/definitions/api.createUserWritingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User writing submission created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user writing submission
      tags:
      - writing
  /api/v1/writing/submissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user writing submission by its ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user writing submission
      tags:
      - writing
    get:
      consumes:
      - application/json
      description: Retrieve a specific user writing submission by its ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User writing submission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a user writing submission by ID
      tags:
      - writing
    put:
      consumes:
      - application/json
      description: Update an existing user writing submission by ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      - description: User writing submission fields to update
        in: body
        name: writing
        required: true
        schema:
          $ref: '#/definitions/api.updateUserWritingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid request body or submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User writing submission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user writing submission
      tags:
      - writing
  /api/v1/writing/users/{user_id}/submissions:
    get:
      consumes:
      - application/json
      description: Get a list of all writing submissions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserWritingResponse'
                  type: array
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submissions
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List user writing submissions by user ID
      tags:
      - writing
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API server is running
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.HealthCheckResponse'
              type: object
      summary: Health check
      tags:
      - health
  /metrics:
    get:
      consumes:
      - application/json
      description: Get system metrics and health information
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.MetricsResponse'
              type: object
      summary: Get system metrics
      tags:
      - monitoring
  /monitoring/status:
    get:
      consumes:
      - application/json
      description: Get the overall monitoring system status
      produces:
      - application/json
      responses:
        "200":
          description: Monitoring status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  type: object
              type: object
      summary: Get monitoring status
      tags:
      - monitoring
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file to Cloudinary and returns the URL.
      parameters:
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded image
          schema:
            properties:
              url:
                type: string
            type: object
        "400":
          description: Bad Request - File not found or invalid
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error - Error opening or uploading file
          schema:
            $ref: '#/definitions/api.Response'
      summary: Upload an image file
      tags:
      - Uploads
  /upload-audio:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an audio file to Cloudinary and returns the URL.
      parameters:
      - description: Audio file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded audio
          schema:
            properties:
              url:
                type: string
            type: object
        "400":
          description: Bad Request - File not found or invalid
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error - Error opening or uploading file
          schema:
            $ref: '#/definitions/api.Response'
      summary: Upload an audio file
      tags:
      - Uploads
swagger: "2.0"
