basePath: /
definitions:
  api.ContentResponse:
    properties:
      content_id:
        type: integer
      description:
        type: string
      part_id:
        type: integer
      type:
        type: string
    type: object
  api.ExamResponse:
    properties:
      exam_id:
        type: integer
      is_unlocked:
        type: boolean
      time_limit_minutes:
        type: integer
      title:
        type: string
    type: object
  api.ExampleResponse:
    properties:
      id:
        type: integer
      meaning:
        type: string
      title:
        type: string
    type: object
  api.GrammarJSONField:
    properties:
      raw: {}
    type: object
  api.GrammarResponse:
    properties:
      contents:
        type: object
      grammar_key:
        type: string
      id:
        type: integer
      level:
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  api.HealthCheckResponse:
    properties:
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  api.MemStats:
    properties:
      alloc:
        type: integer
      num_gc:
        type: integer
      pause_total_ns:
        type: integer
      sys:
        type: integer
      total_alloc:
        type: integer
    type: object
  api.MetricsResponse:
    properties:
      mem_stats:
        $ref: '#/definitions/api.MemStats'
      num_goroutine:
        type: integer
      timestamp:
        type: string
      uptime:
        type: string
    type: object
  api.PartResponse:
    properties:
      exam_id:
        type: integer
      part_id:
        type: integer
      title:
        type: string
    type: object
  api.QuestionResponse:
    properties:
      content_id:
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        type: array
      question_id:
        type: integer
      title:
        type: string
      true_answer:
        type: string
    type: object
  api.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  api.UserResponse:
    properties:
      created_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  api.UserWordProgressResponse:
    properties:
      created_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      ease_factor:
        type: number
      interval_days:
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        type: integer
      updated_at:
        example: "2025-05-01T13:45:00Z"
        format: date-time
        type: string
      user_id:
        type: integer
      word_id:
        type: integer
    type: object
  api.UserWritingResponse:
    description: Response object for user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      evaluated_at:
        type: string
      id:
        type: integer
      prompt_id:
        type: integer
      submission_text:
        type: string
      submitted_at:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api.WordJSONField:
    properties:
      raw: {}
    type: object
  api.WordProgressJSONField:
    properties:
      raw: {}
    type: object
  api.WordProgressResponse:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordProgressJSONField'
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordProgressJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordProgressJSONField'
      word:
        type: string
    type: object
  api.WordResponse:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      id:
        type: integer
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    type: object
  api.WordWithProgressResponse:
    properties:
      progress:
        $ref: '#/definitions/api.UserWordProgressResponse'
      word:
        $ref: '#/definitions/api.WordProgressResponse'
    type: object
  api.WritingPromptResponse:
    properties:
      created_at:
        type: string
      difficulty_level:
        type: string
      id:
        type: integer
      prompt_text:
        type: string
      topic:
        type: string
      user_id:
        type: integer
    type: object
  api.createContentRequest:
    properties:
      description:
        type: string
      part_id:
        minimum: 1
        type: integer
      type:
        type: string
    required:
    - description
    - part_id
    - type
    type: object
  api.createExamRequest:
    properties:
      is_unlocked:
        type: boolean
      time_limit_minutes:
        minimum: 1
        type: integer
      title:
        type: string
    required:
    - time_limit_minutes
    - title
    type: object
  api.createExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.createGrammarRequest:
    properties:
      contents:
        $ref: '#/definitions/api.GrammarJSONField'
      grammar_key:
        type: string
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - contents
    - grammar_key
    - level
    - related
    - tag
    - title
    type: object
  api.createPartRequest:
    properties:
      exam_id:
        minimum: 1
        type: integer
      title:
        type: string
    required:
    - exam_id
    - title
    type: object
  api.createQuestionRequest:
    properties:
      content_id:
        minimum: 1
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        minItems: 1
        type: array
      title:
        type: string
      true_answer:
        type: string
    required:
    - content_id
    - explanation
    - possible_answers
    - title
    - true_answer
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.createUserWordProgressRequest:
    properties:
      ease_factor:
        type: number
      interval_days:
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        type: integer
      word_id:
        type: integer
    required:
    - ease_factor
    - interval_days
    - repetitions
    - word_id
    type: object
  api.createUserWritingRequest:
    description: Request object for creating user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      prompt_id:
        type: integer
      submission_text:
        type: string
      user_id:
        minimum: 1
        type: integer
    required:
    - submission_text
    - user_id
    type: object
  api.createWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    required:
    - descript_level
    - freq
    - level
    - pronounce
    - short_mean
    - word
    type: object
  api.createWritingPromptRequest:
    properties:
      difficulty_level:
        type: string
      prompt_text:
        type: string
      topic:
        type: string
      user_id:
        type: integer
    required:
    - prompt_text
    type: object
  api.loginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.refreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.refreshTokenResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.registerUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.registerUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.updateContentRequest:
    properties:
      description:
        type: string
      part_id:
        minimum: 1
        type: integer
      type:
        type: string
    type: object
  api.updateExamRequest:
    properties:
      is_unlocked:
        type: boolean
      time_limit_minutes:
        minimum: 1
        type: integer
      title:
        type: string
    type: object
  api.updateExampleRequest:
    properties:
      meaning:
        type: string
      title:
        type: string
    required:
    - meaning
    - title
    type: object
  api.updateGrammarRequest:
    properties:
      contents:
        $ref: '#/definitions/api.GrammarJSONField'
      grammar_key:
        type: string
      id:
        minimum: 1
        type: integer
      level:
        minimum: 1
        type: integer
      related:
        items:
          type: integer
        type: array
      tag:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - id
    type: object
  api.updatePartRequest:
    properties:
      exam_id:
        minimum: 1
        type: integer
      title:
        type: string
    type: object
  api.updateQuestionRequest:
    properties:
      content_id:
        minimum: 1
        type: integer
      explanation:
        type: string
      image_url:
        type: string
      keywords:
        type: string
      media_url:
        type: string
      possible_answers:
        items:
          type: string
        minItems: 1
        type: array
      title:
        type: string
      true_answer:
        type: string
    type: object
  api.updateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  api.updateUserWordProgressRequest:
    properties:
      ease_factor:
        type: number
      interval_days:
        type: integer
      last_reviewed_at:
        type: string
      next_review_at:
        type: string
      repetitions:
        type: integer
    required:
    - ease_factor
    - interval_days
    - repetitions
    type: object
  api.updateUserWritingRequest:
    description: Request object for updating user writing submissions
    properties:
      ai_feedback:
        description: AIFeedback is a JSON object containing AI-generated feedback
        type: object
      ai_score:
        type: number
      evaluated_at:
        type: string
      submission_text:
        type: string
    type: object
  api.updateWordRequest:
    properties:
      conjugation:
        $ref: '#/definitions/api.WordJSONField'
      descript_level:
        type: string
      freq:
        type: number
      id:
        minimum: 1
        type: integer
      level:
        type: integer
      means:
        $ref: '#/definitions/api.WordJSONField'
      pronounce:
        type: string
      short_mean:
        type: string
      snym:
        $ref: '#/definitions/api.WordJSONField'
      word:
        type: string
    required:
    - id
    type: object
  api.updateWritingPromptRequest:
    properties:
      difficulty_level:
        type: string
      prompt_text:
        type: string
      topic:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A RESTful API for the Toeic application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Toeic App API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.loginUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Login user
      tags:
      - auth
  /api/refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/api.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.refreshTokenResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Refresh access token
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return authentication tokens
      parameters:
      - description: Registration information
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/api.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.registerUserResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Register a new user
      tags:
      - auth
  /api/v1/content-questions/{content_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all questions for a specific content
      parameters:
      - description: Content ID
        in: path
        name: content_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.QuestionResponse'
                  type: array
              type: object
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve questions
          schema:
            $ref: '#/definitions/api.Response'
      summary: List questions by content
      tags:
      - questions
  /api/v1/contents:
    post:
      consumes:
      - application/json
      description: Add new content to a part
      parameters:
      - description: Content object to create
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/api.createContentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Content created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new content
      tags:
      - contents
  /api/v1/contents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete specific content by its ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Content deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete content
      tags:
      - contents
    get:
      consumes:
      - application/json
      description: Retrieve specific content by its ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Content retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid content ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve content
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get content by ID
      tags:
      - contents
    put:
      consumes:
      - application/json
      description: Update existing content by ID
      parameters:
      - description: Content ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content fields to update
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/api.updateContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Content updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ContentResponse'
              type: object
        "400":
          description: Invalid request body or content ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update content
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update content
      tags:
      - contents
  /api/v1/exam-parts/{exam_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all parts for a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: exam_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Parts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.PartResponse'
                  type: array
              type: object
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve parts
          schema:
            $ref: '#/definitions/api.Response'
      summary: List parts by exam
      tags:
      - parts
  /api/v1/examples:
    get:
      description: Get a list of all examples
      produces:
      - application/json
      responses:
        "200":
          description: Examples retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExampleResponse'
                  type: array
              type: object
        "500":
          description: Failed to retrieve examples
          schema:
            $ref: '#/definitions/api.Response'
      summary: List examples
      tags:
      - examples
    post:
      consumes:
      - application/json
      description: Create a new example
      parameters:
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createExampleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Example created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create example
      tags:
      - examples
  /api/v1/examples/{id}:
    delete:
      description: Delete an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Example deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete example
      tags:
      - examples
    get:
      description: Get details of an example by its ID
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Example retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid example ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve example
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get example by ID
      tags:
      - examples
    put:
      consumes:
      - application/json
      description: Update an existing example
      parameters:
      - description: Example ID
        in: path
        name: id
        required: true
        type: integer
      - description: Example details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExampleResponse'
              type: object
        "400":
          description: Invalid request body or example ID
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Example not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update example
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update example
      tags:
      - examples
  /api/v1/exams:
    get:
      consumes:
      - application/json
      description: Get a list of all exams with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exams retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ExamResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exams
          schema:
            $ref: '#/definitions/api.Response'
      summary: List exams
      tags:
      - exams
    post:
      consumes:
      - application/json
      description: Add a new exam to the database
      parameters:
      - description: Exam object to create
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/api.createExamRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exam created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new exam
      tags:
      - exams
  /api/v1/exams/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific exam by its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an exam
      tags:
      - exams
    get:
      consumes:
      - application/json
      description: Retrieve a specific exam entry by its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve exam
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get an exam by ID
      tags:
      - exams
    put:
      consumes:
      - application/json
      description: Update an existing exam by ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exam fields to update
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/api.updateExamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.ExamResponse'
              type: object
        "400":
          description: Invalid request body or exam ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update exam
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an exam
      tags:
      - exams
  /api/v1/grammars:
    get:
      consumes:
      - application/json
      description: Get a list of grammars with pagination.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars
      tags:
      - grammars
    post:
      consumes:
      - application/json
      description: Add a new grammar to the database.
      parameters:
      - description: Grammar object to create
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.createGrammarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Grammar created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new grammar
      tags:
      - grammars
  /api/v1/grammars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a grammar
      tags:
      - grammars
    get:
      consumes:
      - application/json
      description: Retrieve a specific grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammar
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a grammar by ID
      tags:
      - grammars
    put:
      consumes:
      - application/json
      description: Update an existing grammar entry by its ID.
      parameters:
      - description: Grammar ID
        in: path
        name: id
        required: true
        type: integer
      - description: Grammar object with fields to update
        in: body
        name: grammar
        required: true
        schema:
          $ref: '#/definitions/api.updateGrammarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Grammar updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "400":
          description: Invalid request body or grammar ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Grammar not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update grammar
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a grammar
      tags:
      - grammars
  /api/v1/grammars/level:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by level, with pagination.
      parameters:
      - description: Level to filter by
        in: query
        name: level
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by level
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars by level
      tags:
      - grammars
  /api/v1/grammars/random:
    get:
      consumes:
      - application/json
      description: Retrieve a single random grammar entry from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Random grammar retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.GrammarResponse'
              type: object
        "500":
          description: Failed to retrieve random grammar
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a random grammar
      tags:
      - grammars
  /api/v1/grammars/search:
    get:
      consumes:
      - application/json
      description: Search grammars by title, key, or tag, with pagination.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to search grammars
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search grammars
      tags:
      - grammars
  /api/v1/grammars/tag:
    get:
      consumes:
      - application/json
      description: Get a list of grammars filtered by a specific tag, with pagination.
      parameters:
      - description: Tag to filter by
        in: query
        name: tag
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Grammars retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.GrammarResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve grammars by tag
          schema:
            $ref: '#/definitions/api.Response'
      summary: List grammars by tag
      tags:
      - grammars
  /api/v1/part-contents/{part_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all contents for a specific part
      parameters:
      - description: Part ID
        in: path
        name: part_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Contents retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ContentResponse'
                  type: array
              type: object
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve contents
          schema:
            $ref: '#/definitions/api.Response'
      summary: List contents by part
      tags:
      - contents
  /api/v1/parts:
    post:
      consumes:
      - application/json
      description: Add a new part to an exam
      parameters:
      - description: Part object to create
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/api.createPartRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Part created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new part
      tags:
      - parts
  /api/v1/parts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific part by its ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Part deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a part
      tags:
      - parts
    get:
      consumes:
      - application/json
      description: Retrieve a specific part by its ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Part retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid part ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Part not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve part
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a part by ID
      tags:
      - parts
    put:
      consumes:
      - application/json
      description: Update an existing part by ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      - description: Part fields to update
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/api.updatePartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Part updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.PartResponse'
              type: object
        "400":
          description: Invalid request body or part ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Part not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update part
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a part
      tags:
      - parts
  /api/v1/questions:
    post:
      consumes:
      - application/json
      description: Add a new question to content
      parameters:
      - description: Question object to create
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/api.createQuestionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Question created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new question
      tags:
      - questions
  /api/v1/questions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Question deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid question ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a question
      tags:
      - questions
    get:
      consumes:
      - application/json
      description: Retrieve a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Question retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid question ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve question
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a question by ID
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update an existing question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      - description: Question fields to update
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/api.updateQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Question updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.QuestionResponse'
              type: object
        "400":
          description: Invalid request body or question ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update question
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a question
      tags:
      - questions
  /api/v1/user-word-progress:
    post:
      consumes:
      - application/json
      description: Create a new user word progress record
      parameters:
      - description: User word progress data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createUserWordProgressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User word progress created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create user word progress
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create user word progress
      tags:
      - user-word-progress
  /api/v1/user-word-progress/{word_id}:
    delete:
      consumes:
      - application/json
      description: Delete a word progress record for the current user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User word progress deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete user word progress
      tags:
      - user-word-progress
    get:
      consumes:
      - application/json
      description: Get a specific word progress record for the current user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User word progress retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User word progress not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user word progress
      tags:
      - user-word-progress
    put:
      consumes:
      - application/json
      description: Update a word progress record for the current user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      - description: User word progress data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateUserWordProgressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User word progress updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWordProgressResponse'
              type: object
        "400":
          description: Invalid request parameters or word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User word progress not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update user word progress
      tags:
      - user-word-progress
  /api/v1/user-word-progress/reviews:
    get:
      consumes:
      - application/json
      description: Get a list of words that are due for review for the current user
      parameters:
      - description: Maximum number of words to return (optional)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Words for review retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordWithProgressResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get words for review
      tags:
      - user-word-progress
  /api/v1/user-word-progress/word/{word_id}:
    get:
      consumes:
      - application/json
      description: Get a specific word with its progress information for the current
        user
      parameters:
      - description: Word ID
        in: path
        name: word_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word with progress retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordWithProgressResponse'
              type: object
        "400":
          description: Invalid word ID format
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get word with progress
      tags:
      - user-word-progress
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination. Allows for browsing through
        users.
      parameters:
      - default: 10
        description: Number of users to return per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user listing
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system. This endpoint is typically used
        for user registration.
      parameters:
      - description: User information for registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or validation failure
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user creation
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID.
      parameters:
      - description: User ID of the user to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user deletion
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user's details by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user retrieval
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information by their ID.
      parameters:
      - description: User ID of the user to update
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update. Only provided fields are updated.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "400":
          description: Invalid request parameters or user ID format
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error during user update
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserResponse'
              type: object
        "401":
          description: Unauthorized if the user is not authenticated
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Server error when retrieving user profile
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
  /api/v1/words:
    get:
      consumes:
      - application/json
      description: List words with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of words
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WordResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to list words
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: List words
      tags:
      - words
    post:
      consumes:
      - application/json
      description: Create a new word with the input payload
      parameters:
      - description: Create Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.createWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Word created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new word
      tags:
      - words
  /api/v1/words/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Word deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a word
      tags:
      - words
    get:
      consumes:
      - application/json
      description: Get a word by its ID
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid word ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to get word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a word by ID
      tags:
      - words
    put:
      consumes:
      - application/json
      description: Update a word with the input payload
      parameters:
      - description: Word ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Word Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.updateWordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WordResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Word not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update word
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a word
      tags:
      - words
  /api/v1/writing/prompt-submissions/{prompt_id}:
    get:
      consumes:
      - application/json
      description: Get a list of all writing submissions for a specific prompt
      parameters:
      - description: Prompt ID
        in: path
        name: prompt_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserWritingResponse'
                  type: array
              type: object
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submissions
          schema:
            $ref: '#/definitions/api.Response'
      summary: List user writing submissions by prompt ID
      tags:
      - writing
  /api/v1/writing/prompts:
    get:
      consumes:
      - application/json
      description: Get a list of all writing prompts
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompts retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.WritingPromptResponse'
                  type: array
              type: object
        "500":
          description: Failed to retrieve writing prompts
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all writing prompts
      tags:
      - writing
    post:
      consumes:
      - application/json
      description: Add a new writing prompt to the database
      parameters:
      - description: Writing prompt object to create
        in: body
        name: prompt
        required: true
        schema:
          $ref: '#/definitions/api.createWritingPromptRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Writing prompt created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new writing prompt
      tags:
      - writing
  /api/v1/writing/prompts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific writing prompt by its ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a writing prompt
      tags:
      - writing
    get:
      consumes:
      - application/json
      description: Retrieve a specific writing prompt by its ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Writing prompt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a writing prompt by ID
      tags:
      - writing
    put:
      consumes:
      - application/json
      description: Update an existing writing prompt by ID
      parameters:
      - description: Writing Prompt ID
        in: path
        name: id
        required: true
        type: integer
      - description: Writing prompt fields to update
        in: body
        name: prompt
        required: true
        schema:
          $ref: '#/definitions/api.updateWritingPromptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Writing prompt updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.WritingPromptResponse'
              type: object
        "400":
          description: Invalid request body or prompt ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Writing prompt not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update writing prompt
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a writing prompt
      tags:
      - writing
  /api/v1/writing/submissions:
    post:
      consumes:
      - application/json
      description: Add a new user writing submission to the database
      parameters:
      - description: User writing submission object to create
        in: body
        name: writing
        required: true
        schema:
          $ref: '#/definitions/api.createUserWritingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User writing submission created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to create user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user writing submission
      tags:
      - writing
  /api/v1/writing/submissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user writing submission by its ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to delete user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user writing submission
      tags:
      - writing
    get:
      consumes:
      - application/json
      description: Retrieve a specific user writing submission by its ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User writing submission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a user writing submission by ID
      tags:
      - writing
    put:
      consumes:
      - application/json
      description: Update an existing user writing submission by ID
      parameters:
      - description: User Writing Submission ID
        in: path
        name: id
        required: true
        type: integer
      - description: User writing submission fields to update
        in: body
        name: writing
        required: true
        schema:
          $ref: '#/definitions/api.updateUserWritingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User writing submission updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.UserWritingResponse'
              type: object
        "400":
          description: Invalid request body or submission ID
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User writing submission not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to update user writing submission
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user writing submission
      tags:
      - writing
  /api/v1/writing/users/{user_id}/submissions:
    get:
      consumes:
      - application/json
      description: Get a list of all writing submissions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User writing submissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserWritingResponse'
                  type: array
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Failed to retrieve user writing submissions
          schema:
            $ref: '#/definitions/api.Response'
      summary: List user writing submissions by user ID
      tags:
      - writing
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API server is running
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.HealthCheckResponse'
              type: object
      summary: Health check
      tags:
      - health
  /metrics:
    get:
      consumes:
      - application/json
      description: Get system metrics and health information
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/api.MetricsResponse'
              type: object
      summary: Get system metrics
      tags:
      - monitoring
securityDefinitions:
  ApiKeyAuth:
    description: 'Bearer JWT token authorization. Format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
