# Build stage
FROM golang:1.24-alpine AS builder

# Install security updates and necessary packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Create non-root user for build
RUN adduser -D -g '' appuser

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with security flags
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o main .

# Production stage - use distroless for minimal attack surface
FROM gcr.io/distroless/static-debian11

# Copy SSL certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy PostgreSQL client (if needed for backups)
COPY --from=builder /usr/bin/pg_dump /usr/bin/pg_dump
COPY --from=builder /usr/bin/psql /usr/bin/psql

# Create non-root user (distroless already has nonroot user)
USER nonroot:nonroot

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder --chown=nonroot:nonroot /app/main ./main

# Copy startup script if needed
COPY --from=builder --chown=nonroot:nonroot /app/start.sh ./start.sh

# Create required directories with proper permissions
USER root
RUN mkdir -p /app/logs /app/backups && \
    chown -R nonroot:nonroot /app/logs /app/backups
USER nonroot:nonroot

# Copy additional files with proper ownership
COPY --from=builder --chown=nonroot:nonroot /app/docs ./docs

# Set environment variables for security
ENV GO_ENV=production
ENV GIN_MODE=release

# Expose only the necessary port
EXPOSE 8000

# Add health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD ["/app/main", "--health-check"] || exit 1

# Use exec form for better signal handling
ENTRYPOINT ["/app/main"]
