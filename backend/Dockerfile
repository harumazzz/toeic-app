# Build stage
FROM golang:1.24-alpine AS builder

# Install necessary packages
RUN apk add --no-cache git ca-certificates tzdata postgresql-client

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Production stage
FROM alpine:latest

# Install necessary packages
RUN apk --no-cache add ca-certificates tzdata postgresql-client curl

# Create app directory
WORKDIR /root/

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Copy startup script
COPY --from=builder /app/start.sh .
RUN chmod +x start.sh

# Create logs directory
RUN mkdir -p logs

# Create backups directory  
RUN mkdir -p backups

# Copy any additional files if needed
COPY --from=builder /app/docs ./docs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Run the application with smart startup
CMD ["./start.sh"]
