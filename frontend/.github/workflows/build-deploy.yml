# GitHub Actions CI/CD for Flutter TOEIC App

name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
    - run: flutter pub get
      working-directory: ./frontend
    - run: flutter test
      working-directory: ./frontend
    - run: flutter analyze
      working-directory: ./frontend

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
    - run: flutter pub get
      working-directory: ./frontend
    
    # Setup Android signing
    - name: Setup Android signing
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
        echo "storeFile=keystore.jks" >> android/key.properties
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
      working-directory: ./frontend
    
    - run: flutter build appbundle --release
      working-directory: ./frontend
    
    - name: Upload Android App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle
        path: frontend/build/app/outputs/bundle/release/app-release.aab

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
    - run: flutter pub get
      working-directory: ./frontend
    
    # Setup iOS signing
    - name: Setup iOS signing
      run: |
        # Setup certificates and provisioning profiles
        echo "${{ secrets.IOS_CERTIFICATE }}" | base64 --decode > certificate.p12
        echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
        
        # Install certificate
        security create-keychain -p "" build.keychain
        security import certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
    
    - run: flutter build ios --release --no-codesign
      working-directory: ./frontend
    
    - name: Build iOS Archive
      run: |
        xcodebuild -workspace ios/Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath build/ios/Runner.xcarchive \
                   archive
      working-directory: ./frontend
    
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
                   -archivePath build/ios/Runner.xcarchive \
                   -exportPath build/ios/ipa \
                   -exportOptionsPlist ios/ExportOptions.plist
      working-directory: ./frontend
    
    - name: Upload iOS IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa
        path: frontend/build/ios/ipa/*.ipa

  deploy-android:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: android-appbundle
    
    - name: Deploy to Google Play
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.haruma.toeic.learn
        releaseFiles: app-release.aab
        track: internal  # Change to 'production' for live release

  deploy-ios:
    needs: build-ios
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: ios-ipa
    
    - name: Deploy to TestFlight
      run: |
        xcrun altool --upload-app \
                     --type ios \
                     --file *.ipa \
                     --username "${{ secrets.APPLE_ID }}" \
                     --password "${{ secrets.APPLE_APP_PASSWORD }}"
